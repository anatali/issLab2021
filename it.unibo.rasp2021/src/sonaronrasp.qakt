/*
 * ----------------------------------------------------------------------
 * RUNS ON Raspberry
 *
 * - loads the kb about the system (sonar2021Kb.pl) and showSystemConfiguration
 * - loads the sonarnaive.pl and reads the sonar-data source (real or simulated).
 *   	If real, activates the CodedQActor sonardatasource of class sonarHCSR04Support2021
 *   	If simulated, activates the CodedQActor sonarsimulator of class sonarsimulator
 * - setup the sonar-data pipe that emits-on-stream the event sonar:distance( V )
 * - handles the event sonar and emits the event sonarrobot:sonar( D )
 * 
 * TO INTERACT from Rasp to PC without MQTT => 
 *            remove Windows firewall or allow port 8028
 * ----------------------------------------------------------------------
 */

 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 

System -trace  sonaronrasp   
mqttBroker "192.168.1.45" : 1883 eventTopic "sonar/data"   //broker.hivemq.com
 
Dispatch sonarstart      : sonarstart(V)  
Dispatch simulatorstart  : simulator(V)  
Event    sonar           : distance( V )   //emitted by rx.sonarSimulator or sensors.sonarHCSR04SupportActor	
Event    sonarrobot      : sonar( V )      //for the application level
 
Context ctxsonaronrasp   ip [host="localhost"     port=8068   ] 	
//REMOVE THE COMMENTS IN CASE OF RESOURCE-AWARE CONFIGURATION 	
//Context ctxsonarresource ip [host= "192.168.1.45"    port=8028   ]	//127.0.0.1 Deploy on Rasp
//ExternalQActor sonarresource context ctxsonarresource
  
//DATA SOURCES
CodedQActor sonarsimulator  context ctxsonaronrasp className "sonarSimulator"  
CodedQActor sonardatasource context ctxsonaronrasp className "sonarHCSR04Support2021"

//Filters
//CodedQActor datalogger     context ctxsonaronrasp className "dataLogger"
CodedQActor datacleaner    context ctxsonaronrasp className "dataCleaner"
//CodedQActor distancefilter context ctxsonaronrasp className "distanceFilter"
  
QActor sonar context ctxsonaronrasp {     
[# var simulate = true
   lateinit var firstActorInPipe : ActorBasic 
#]
 	State s0 initial {  		 
 		println("sonar START")
 		discardMsg On		 		
 		/*
 		 * INTROSPECTION
 		 
 		solve( consult("sysRules.pl")	 )
 		solve( consult("sonaronrasp.pl") )
 		solve( showSystemConfiguration   )*/
 		/*
 		 * CONFIGURATION
 		*/ 
 		solve( consult("sonar2021ConfigKb.pl")	 )
 		solve( simulate(X) )
		println( currentSolution )	//yes X / on oppure X / off
		[# val x = getCurSol("X").toString() 
		   simulate = ( x == "on")	
		   println( "simulate=$simulate" )
		#] 		
 
		//CREATE THE PIPE
		[#  if( simulate ) firstActorInPipe = sysUtil.getActor("sonarsimulator")!!  //generates simulated data
			else firstActorInPipe           = sysUtil.getActor("sonardatasource")!!  //generates REAL data
 			firstActorInPipe.
				subscribeLocalActor("datacleaner"). 		//removes 'wrong' data''
				//subscribeLocalActor("datalogger").		    //logs (shows) the data generated by the sonar
  				//subscribeLocalActor("sonar").				//handles sonarrobot but does not propagate ...
 				//subscribeLocalActor("distancefilter").		//propagates the lcoal stream event obstacle
  				subscribeLocalActor("sonar")  
		#]    

 		//ACTIVATE THE DATA SOURCE (REAL or SIMULATED)
		if [# simulate #]{forward sonarsimulator -m simulatorstart : simulatorstart(ok) }
 		else{ forward sonardatasource -m sonarstart : sonarstart(ok) }  //payload don't care

  	}  
  	Transition t0  whenEvent sonar -> handleSonarData  
			 		  
 	
  	State handleSonarData{
  		printCurrentMessage
  		 onMsg( sonar : distance(D) ){
  		 	[# val D = payloadArg(0) 
  		 	   //val ev = MsgUtil.buildEvent(name,"sonarrobot","sonar($D)")
  		 	   //emit( ev, false  )  //Not emit for me (but not applies to MQTT)
  		 	#]  
  		 	emit sonarrobot : sonar($D)
  		 }
  	}
   	Transition t0 whenEvent sonar -> handleSonarData
 }

