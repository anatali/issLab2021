/* Generated by AN DISI Unibo */ 
package it.unibo.appllogic

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Appllogic ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
				
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("		appllogic | start")
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('applRulesKb.pl')","") //set resVar	
						solve("led(X)","") //set resVar	
						 val LedVal = getCurSol("X").toString()  
						println("		appllogic | initial led value=$LedVal")
					}
					 transition( edgeName="goto",targetState="waitwork", cond=doswitch() )
				}	 
				state("waitwork") { //this:State
					action { //it:State
					}
					 transition(edgeName="t02",targetState="work",cond=whenEvent("local_appl"))
				}	 
				state("work") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("job(X)"), Term.createTerm("job(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val D  = applsupport.getSonarDistance( payloadArg(0) )
												solve( "modifyResource($D,R)" )
												//println( currentSolution )
												val DoResource = getCurSol("R").toString()
												
												val SimulatedTemperature = 35		//see usecase LedChange
												solve( "modifyLed($D,$SimulatedTemperature,RT)" )
												val DoLed  = getCurSol("RT").toString()
								println("		appllogic | DoResource=$DoResource")
								println("		appllogic | DoLed     =$DoLed")
								if(  DoResource =="ok"  
								 ){forward("applupdate", "applupdate(sonarrobot($D))" ,"sonarresource" ) 
								if(  DoLed =="ok"  
								 ){forward("applupdate", "applupdate(led(on))" ,"sonarresource" ) 
								emit("ledchange", "ledchange(on)" ) 
								}
								else
								 {forward("applupdate", "applupdate(led(off))" ,"sonarresource" ) 
								 emit("ledchange", "ledchange(off)" ) 
								 }
								}
						}
					}
					 transition( edgeName="goto",targetState="waitwork", cond=doswitch() )
				}	 
			}
		}
}
