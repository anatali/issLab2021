/* Generated by AN DISI Unibo */ 
package it.unibo.sonarmock

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonarmock ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
				
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 val input   = java.util.Scanner(System.`in`)  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("sonarmock start")
						emit("sonarrobot", "sonar(50)" ) 
						forward("applupdate", "applupdate(sonarrobot(10))" ,"sonarresource" ) 
					}
				}	 
				state("work") { //this:State
					action { //it:State
						delay(500) 
						 print("VALUE>"); var Data = input.nextLine()  
						emit("sonarrobot", "sonar($Data)" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
