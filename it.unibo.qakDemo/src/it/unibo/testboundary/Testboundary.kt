/* Generated by AN DISI Unibo */ 
package it.unibo.testboundary

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Testboundary ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
				
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 val doboundary = true  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="boundarywalk", cond=doswitchGuarded({ doboundary  
					}) )
					transition( edgeName="goto",targetState="endTest", cond=doswitchGuarded({! ( doboundary  
					) }) )
				}	 
				state("boundarywalk") { //this:State
					action { //it:State
						forward("start", "start(any)" ,"basicboundarywalker" ) 
					}
					 transition(edgeName="t04",targetState="endTest",cond=whenDispatch("mapDone"))
				}	 
				state("endTest") { //this:State
					action { //it:State
						println("testboundary | END OF JOB")
					}
				}	 
			}
		}
}
