/* Generated by AN DISI Unibo */ 
package it.unibo.timer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Timer ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var N = 1  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(500) 
						 MsgUtil.outblue(" .... timer | emits $N ")  
						forward("tick", "tick($N)" ,"pathexec" ) 
						 N = N + 1  
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitchGuarded({ N < 5  
					}) )
					transition( edgeName="goto",targetState="endJob", cond=doswitchGuarded({! ( N < 5  
					) }) )
				}	 
				state("endJob") { //this:State
					action { //it:State
<<<<<<< HEAD:unibo.qk30demo/src/it/unibo/timer/Timer.kt
						println("timer BYE")
=======
						delay(3000) 
						emit("alarm", "alarm($N)" ) 
						 N = N+1  
>>>>>>> 1bbacb9c7c6be722adf4aa1ae59b727ade51d838:unibo.qk30demo/src/it/unibo/cmdconsole/Cmdconsole.kt
					}
				}	 
			}
		}
}
