/* Generated by AN DISI Unibo */ 
package it.unibo.componentb

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Componentb ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "componentb(s0)"  
						)
						discardMessages = false
					}
					 transition(edgeName="t02",targetState="s1",cond=whenRequest("atob"))
				}	 
				state("s1") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						updateResourceRep( "componentb(s1)"  
						)
						request("btoc", "btoc(_)" ,"componentc" )  
					}
					 transition(edgeName="t03",targetState="s2",cond=whenReply("ctob"))
				}	 
				state("s2") { //this:State
					action { //it:State
						updateResourceRep( "componentb(s2)"  
						)
						answer("atob", "btoa", "btoa(_)"   )  
						println("Componentb | DONE")
					}
				}	 
			}
		}
}
