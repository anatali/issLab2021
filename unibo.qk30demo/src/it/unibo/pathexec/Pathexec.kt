/* Generated by AN DISI Unibo */ 
package it.unibo.pathexec

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Pathexec ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var Counter = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t12",targetState="doThePath",cond=whenRequest("dopath"))
				}	 
				state("doThePath") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 Counter = 4  
					}
					 transition( edgeName="goto",targetState="nextMove", cond=doswitch() )
				}	 
				state("nextMove") { //this:State
					action { //it:State
						 MsgUtil.outgreen("pathexec | Move progress: ${5 - Counter}")  
						 Counter--  
						stateTimer = TimerActor("timer_nextMove", 
							scope, context!!, "local_tout_pathexec_nextMove", 500.toLong() )
					}
					 transition(edgeName="t23",targetState="checkWorkEnded",cond=whenTimeout("local_tout_pathexec_nextMove"))   
					interrupthandle(edgeName="t24",targetState="stopped",cond=whenDispatch("stopPath"),interruptedStateTransitions)
				}	 
				state("checkWorkEnded") { //this:State
					action { //it:State
						 MsgUtil.outblue("pathexec | checkWorkEnded: ${Counter}")  
					}
					 transition( edgeName="goto",targetState="endWorkOk", cond=doswitchGuarded({ Counter <= 0  
					}) )
					transition( edgeName="goto",targetState="nextMove", cond=doswitchGuarded({! ( Counter <= 0  
					) }) )
				}	 
				state("endWorkOk") { //this:State
					action { //it:State
						println("########### endWorkOk: PATH DONE ########### ")
						answer("dopath", "dopathdone", "dopathdone(ok)"   )  
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("stopped") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 MsgUtil.outmagenta("pathexec | pathexec stopped")  
					}
					 transition(edgeName="t35",targetState="resumeFromStop",cond=whenDispatch("resumePath"))
				}	 
				state("resumeFromStop") { //this:State
					action { //it:State
						 MsgUtil.outblue("pathexec | pathexec resumed")  
						returnFromInterrupt(interruptedStateTransitions)
					}
				}	 
			}
		}
}
