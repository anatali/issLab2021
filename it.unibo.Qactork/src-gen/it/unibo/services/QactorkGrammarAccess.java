/*
 * generated by Xtext 2.22.0
 */
package it.unibo.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QactorkGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class QActorSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.QActorSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTraceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTraceTraceKeyword_1_0 = (Keyword)cTraceAssignment_1.eContents().get(0);
		private final Assignment cLogmsgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cLogmsgMsglogKeyword_2_0 = (Keyword)cLogmsgAssignment_2.eContents().get(0);
		private final Assignment cSpecAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecQActorSystemSpecParserRuleCall_3_0 = (RuleCall)cSpecAssignment_3.eContents().get(0);
		
		//QActorSystem:
		//	"System" trace?="-trace"? logmsg?="-msglog"? spec=QActorSystemSpec;
		@Override public ParserRule getRule() { return rule; }
		
		//"System" trace?="-trace"? logmsg?="-msglog"? spec=QActorSystemSpec
		public Group getGroup() { return cGroup; }
		
		//"System"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//trace?="-trace"?
		public Assignment getTraceAssignment_1() { return cTraceAssignment_1; }
		
		//"-trace"
		public Keyword getTraceTraceKeyword_1_0() { return cTraceTraceKeyword_1_0; }
		
		//logmsg?="-msglog"?
		public Assignment getLogmsgAssignment_2() { return cLogmsgAssignment_2; }
		
		//"-msglog"
		public Keyword getLogmsgMsglogKeyword_2_0() { return cLogmsgMsglogKeyword_2_0; }
		
		//spec=QActorSystemSpec
		public Assignment getSpecAssignment_3() { return cSpecAssignment_3; }
		
		//QActorSystemSpec
		public RuleCall getSpecQActorSystemSpecParserRuleCall_3_0() { return cSpecQActorSystemSpecParserRuleCall_3_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QActorSystemSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.QActorSystemSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cMqttBrokerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMqttBrokerBrokerSpecParserRuleCall_1_0 = (RuleCall)cMqttBrokerAssignment_1.eContents().get(0);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageMessageParserRuleCall_2_0 = (RuleCall)cMessageAssignment_2.eContents().get(0);
		private final Assignment cContextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContextContextParserRuleCall_3_0 = (RuleCall)cContextAssignment_3.eContents().get(0);
		private final Assignment cActorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActorQActorDeclarationParserRuleCall_4_0 = (RuleCall)cActorAssignment_4.eContents().get(0);
		
		//QActorSystemSpec:
		//	name=ID
		//	mqttBroker=BrokerSpec?
		//	message+=Message*
		//	context+=Context*
		//	actor+=QActorDeclaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID mqttBroker=BrokerSpec? message+=Message* context+=Context* actor+=QActorDeclaration*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//mqttBroker=BrokerSpec?
		public Assignment getMqttBrokerAssignment_1() { return cMqttBrokerAssignment_1; }
		
		//BrokerSpec
		public RuleCall getMqttBrokerBrokerSpecParserRuleCall_1_0() { return cMqttBrokerBrokerSpecParserRuleCall_1_0; }
		
		//message+=Message*
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }
		
		//Message
		public RuleCall getMessageMessageParserRuleCall_2_0() { return cMessageMessageParserRuleCall_2_0; }
		
		//context+=Context*
		public Assignment getContextAssignment_3() { return cContextAssignment_3; }
		
		//Context
		public RuleCall getContextContextParserRuleCall_3_0() { return cContextContextParserRuleCall_3_0; }
		
		//actor+=QActorDeclaration*
		public Assignment getActorAssignment_4() { return cActorAssignment_4; }
		
		//QActorDeclaration
		public RuleCall getActorQActorDeclarationParserRuleCall_4_0() { return cActorQActorDeclarationParserRuleCall_4_0; }
	}
	public class BrokerSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.BrokerSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMqttBrokerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBrokerHostAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBrokerHostSTRINGTerminalRuleCall_1_0 = (RuleCall)cBrokerHostAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBrokerPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBrokerPortINTTerminalRuleCall_3_0 = (RuleCall)cBrokerPortAssignment_3.eContents().get(0);
		private final Keyword cEventTopicKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEventtopicAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEventtopicSTRINGTerminalRuleCall_5_0 = (RuleCall)cEventtopicAssignment_5.eContents().get(0);
		
		//BrokerSpec:
		//	"mqttBroker" brokerHost=STRING ":" brokerPort=INT "eventTopic" eventtopic=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"mqttBroker" brokerHost=STRING ":" brokerPort=INT "eventTopic" eventtopic=STRING
		public Group getGroup() { return cGroup; }
		
		//"mqttBroker"
		public Keyword getMqttBrokerKeyword_0() { return cMqttBrokerKeyword_0; }
		
		//brokerHost=STRING
		public Assignment getBrokerHostAssignment_1() { return cBrokerHostAssignment_1; }
		
		//STRING
		public RuleCall getBrokerHostSTRINGTerminalRuleCall_1_0() { return cBrokerHostSTRINGTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//brokerPort=INT
		public Assignment getBrokerPortAssignment_3() { return cBrokerPortAssignment_3; }
		
		//INT
		public RuleCall getBrokerPortINTTerminalRuleCall_3_0() { return cBrokerPortINTTerminalRuleCall_3_0; }
		
		//"eventTopic"
		public Keyword getEventTopicKeyword_4() { return cEventTopicKeyword_4; }
		
		//eventtopic=STRING
		public Assignment getEventtopicAssignment_5() { return cEventtopicAssignment_5; }
		
		//STRING
		public RuleCall getEventtopicSTRINGTerminalRuleCall_5_0() { return cEventtopicSTRINGTerminalRuleCall_5_0; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOutOnlyMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutInMessageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * ------------------------------------------
		// * MESSAGE
		//* ------------------------------------------
		// */ Message:
		//	OutOnlyMessage | OutInMessage;
		@Override public ParserRule getRule() { return rule; }
		
		//OutOnlyMessage | OutInMessage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OutOnlyMessage
		public RuleCall getOutOnlyMessageParserRuleCall_0() { return cOutOnlyMessageParserRuleCall_0; }
		
		//OutInMessage
		public RuleCall getOutInMessageParserRuleCall_1() { return cOutInMessageParserRuleCall_1; }
	}
	public class OutOnlyMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.OutOnlyMessage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDispatchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTokenParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OutOnlyMessage:
		//	Dispatch | Event | Signal | Token;
		@Override public ParserRule getRule() { return rule; }
		
		//Dispatch | Event | Signal | Token
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Dispatch
		public RuleCall getDispatchParserRuleCall_0() { return cDispatchParserRuleCall_0; }
		
		//Event
		public RuleCall getEventParserRuleCall_1() { return cEventParserRuleCall_1; }
		
		//Signal
		public RuleCall getSignalParserRuleCall_2() { return cSignalParserRuleCall_2; }
		
		//Token
		public RuleCall getTokenParserRuleCall_3() { return cTokenParserRuleCall_3; }
	}
	public class OutInMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.OutInMessage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRequestParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReplyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInvitationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OutInMessage:
		//	Request | Reply | Invitation;
		@Override public ParserRule getRule() { return rule; }
		
		//Request | Reply | Invitation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Request
		public RuleCall getRequestParserRuleCall_0() { return cRequestParserRuleCall_0; }
		
		//Reply
		public RuleCall getReplyParserRuleCall_1() { return cReplyParserRuleCall_1; }
		
		//Invitation
		public RuleCall getInvitationParserRuleCall_2() { return cInvitationParserRuleCall_2; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Event:
		//	"Event" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Event" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Signal:
		//	"Signal" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Signal" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Signal"
		public Keyword getSignalKeyword_0() { return cSignalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Token");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTokenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Token:
		//	"Token" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Token" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Token"
		public Keyword getTokenKeyword_0() { return cTokenKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class DispatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Dispatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDispatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Dispatch:
		//	"Dispatch" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Dispatch" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Dispatch"
		public Keyword getDispatchKeyword_0() { return cDispatchKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class RequestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Request");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Request:
		//	"Request" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Request" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Request"
		public Keyword getRequestKeyword_0() { return cRequestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class ReplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Reply");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Reply:
		//	"Reply" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Reply" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Reply"
		public Keyword getReplyKeyword_0() { return cReplyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class InvitationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Invitation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvitationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMsgPHeadParserRuleCall_3_0 = (RuleCall)cMsgAssignment_3.eContents().get(0);
		
		//Invitation:
		//	"Invitation" name=ID ":" msg=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"Invitation" name=ID ":" msg=PHead
		public Group getGroup() { return cGroup; }
		
		//"Invitation"
		public Keyword getInvitationKeyword_0() { return cInvitationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//msg=PHead
		public Assignment getMsgAssignment_3() { return cMsgAssignment_3; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_3_0() { return cMsgPHeadParserRuleCall_3_0; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIpKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIpComponentIPParserRuleCall_3_0 = (RuleCall)cIpAssignment_3.eContents().get(0);
		private final Assignment cMqttAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cMqttMqttKeyword_4_0 = (Keyword)cMqttAssignment_4.eContents().get(0);
		
		///* 
		// * Context
		// */ Context:
		//	"Context" name=ID "ip" ip=ComponentIP mqtt?="+mqtt"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"Context" name=ID "ip" ip=ComponentIP mqtt?="+mqtt"?
		public Group getGroup() { return cGroup; }
		
		//"Context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"ip"
		public Keyword getIpKeyword_2() { return cIpKeyword_2; }
		
		//ip=ComponentIP
		public Assignment getIpAssignment_3() { return cIpAssignment_3; }
		
		//ComponentIP
		public RuleCall getIpComponentIPParserRuleCall_3_0() { return cIpComponentIPParserRuleCall_3_0; }
		
		//mqtt?="+mqtt"?
		public Assignment getMqttAssignment_4() { return cMqttAssignment_4; }
		
		//"+mqtt"
		public Keyword getMqttMqttKeyword_4_0() { return cMqttMqttKeyword_4_0; }
	}
	public class ComponentIPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.ComponentIP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentIPAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHostKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHostAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHostSTRINGTerminalRuleCall_3_0 = (RuleCall)cHostAssignment_3.eContents().get(0);
		private final Keyword cPortKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPortAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPortINTTerminalRuleCall_5_0 = (RuleCall)cPortAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ComponentIP:
		//	{ComponentIP} "[" "host=" host=STRING "port=" port=INT "]";
		@Override public ParserRule getRule() { return rule; }
		
		//{ComponentIP} "[" "host=" host=STRING "port=" port=INT "]"
		public Group getGroup() { return cGroup; }
		
		//{ComponentIP}
		public Action getComponentIPAction_0() { return cComponentIPAction_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//"host="
		public Keyword getHostKeyword_2() { return cHostKeyword_2; }
		
		//host=STRING
		public Assignment getHostAssignment_3() { return cHostAssignment_3; }
		
		//STRING
		public RuleCall getHostSTRINGTerminalRuleCall_3_0() { return cHostSTRINGTerminalRuleCall_3_0; }
		
		//"port="
		public Keyword getPortKeyword_4() { return cPortKeyword_4; }
		
		//port=INT
		public Assignment getPortAssignment_5() { return cPortAssignment_5; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_5_0() { return cPortINTTerminalRuleCall_5_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class QActorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.QActorDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQActorCodedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQActorExternalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///* 
		// * QActor
		// */ QActorDeclaration:
		//	QActor | QActorCoded | QActorExternal;
		@Override public ParserRule getRule() { return rule; }
		
		//QActor | QActorCoded | QActorExternal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//QActor
		public RuleCall getQActorParserRuleCall_0() { return cQActorParserRuleCall_0; }
		
		//QActorCoded
		public RuleCall getQActorCodedParserRuleCall_1() { return cQActorCodedParserRuleCall_1; }
		
		//QActorExternal
		public RuleCall getQActorExternalParserRuleCall_2() { return cQActorExternalParserRuleCall_2; }
	}
	public class QActorExternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.QActorExternal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalQActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cContextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContextContextCrossReference_3_0 = (CrossReference)cContextAssignment_3.eContents().get(0);
		private final RuleCall cContextContextIDTerminalRuleCall_3_0_1 = (RuleCall)cContextContextCrossReference_3_0.eContents().get(1);
		
		//QActorExternal:
		//	"ExternalQActor" name=ID "context" context=[Context];
		@Override public ParserRule getRule() { return rule; }
		
		//"ExternalQActor" name=ID "context" context=[Context]
		public Group getGroup() { return cGroup; }
		
		//"ExternalQActor"
		public Keyword getExternalQActorKeyword_0() { return cExternalQActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"context"
		public Keyword getContextKeyword_2() { return cContextKeyword_2; }
		
		//context=[Context]
		public Assignment getContextAssignment_3() { return cContextAssignment_3; }
		
		//[Context]
		public CrossReference getContextContextCrossReference_3_0() { return cContextContextCrossReference_3_0; }
		
		//ID
		public RuleCall getContextContextIDTerminalRuleCall_3_0_1() { return cContextContextIDTerminalRuleCall_3_0_1; }
	}
	public class QActorCodedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.QActorCoded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCodedQActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cContextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContextContextCrossReference_3_0 = (CrossReference)cContextAssignment_3.eContents().get(0);
		private final RuleCall cContextContextIDTerminalRuleCall_3_0_1 = (RuleCall)cContextContextCrossReference_3_0.eContents().get(1);
		private final Keyword cClassNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cClassNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClassNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cClassNameAssignment_5.eContents().get(0);
		
		//QActorCoded:
		//	"CodedQActor" name=ID "context" context=[Context] "className" className=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"CodedQActor" name=ID "context" context=[Context] "className" className=STRING
		public Group getGroup() { return cGroup; }
		
		//"CodedQActor"
		public Keyword getCodedQActorKeyword_0() { return cCodedQActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"context"
		public Keyword getContextKeyword_2() { return cContextKeyword_2; }
		
		//context=[Context]
		public Assignment getContextAssignment_3() { return cContextAssignment_3; }
		
		//[Context]
		public CrossReference getContextContextCrossReference_3_0() { return cContextContextCrossReference_3_0; }
		
		//ID
		public RuleCall getContextContextIDTerminalRuleCall_3_0_1() { return cContextContextIDTerminalRuleCall_3_0_1; }
		
		//"className"
		public Keyword getClassNameKeyword_4() { return cClassNameKeyword_4; }
		
		//className=STRING
		public Assignment getClassNameAssignment_5() { return cClassNameAssignment_5; }
		
		//STRING
		public RuleCall getClassNameSTRINGTerminalRuleCall_5_0() { return cClassNameSTRINGTerminalRuleCall_5_0; }
	}
	public class QActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.QActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cContextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContextContextCrossReference_3_0 = (CrossReference)cContextAssignment_3.eContents().get(0);
		private final RuleCall cContextContextIDTerminalRuleCall_3_0_1 = (RuleCall)cContextContextCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStartAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStartAnyActionParserRuleCall_5_0 = (RuleCall)cStartAssignment_5.eContents().get(0);
		private final Assignment cStatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatesStateParserRuleCall_6_0 = (RuleCall)cStatesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//QActor:
		//	"QActor" name=ID "context" context=[Context]
		//	"{"
		//	start=AnyAction?
		//	states+=State*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"QActor" name=ID "context" context=[Context] "{" start=AnyAction? states+=State* "}"
		public Group getGroup() { return cGroup; }
		
		//"QActor"
		public Keyword getQActorKeyword_0() { return cQActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"context"
		public Keyword getContextKeyword_2() { return cContextKeyword_2; }
		
		//context=[Context]
		public Assignment getContextAssignment_3() { return cContextAssignment_3; }
		
		//[Context]
		public CrossReference getContextContextCrossReference_3_0() { return cContextContextCrossReference_3_0; }
		
		//ID
		public RuleCall getContextContextIDTerminalRuleCall_3_0_1() { return cContextContextIDTerminalRuleCall_3_0_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//start=AnyAction?
		public Assignment getStartAssignment_5() { return cStartAssignment_5; }
		
		//AnyAction
		public RuleCall getStartAnyActionParserRuleCall_5_0() { return cStartAnyActionParserRuleCall_5_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_6() { return cStatesAssignment_6; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_6_0() { return cStatesStateParserRuleCall_6_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNormalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNormalInitialKeyword_2_0 = (Keyword)cNormalAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionsStateActionParserRuleCall_4_0 = (RuleCall)cActionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTransitionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTransitionTransitionParserRuleCall_6_0 = (RuleCall)cTransitionAssignment_6.eContents().get(0);
		
		///*
		// * State
		// */ State:
		//	"State" name=ID normal?="initial"?
		//	//actionseq = ActionSequence
		//	"{" actions+=StateAction* "}"
		//	transition=Transition?;
		@Override public ParserRule getRule() { return rule; }
		
		//"State" name=ID normal?="initial"? //actionseq = ActionSequence
		//"{" actions+=StateAction* "}" transition=Transition?
		public Group getGroup() { return cGroup; }
		
		//"State"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//normal?="initial"?
		public Assignment getNormalAssignment_2() { return cNormalAssignment_2; }
		
		//"initial"
		public Keyword getNormalInitialKeyword_2_0() { return cNormalInitialKeyword_2_0; }
		
		////actionseq = ActionSequence
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//actions+=StateAction*
		public Assignment getActionsAssignment_4() { return cActionsAssignment_4; }
		
		//StateAction
		public RuleCall getActionsStateActionParserRuleCall_4_0() { return cActionsStateActionParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//transition=Transition?
		public Assignment getTransitionAssignment_6() { return cTransitionAssignment_6; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_6_0() { return cTransitionTransitionParserRuleCall_6_0; }
	}
	public class StateActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.StateAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGuardedStateActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfSolvedActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrintCurMsgParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSolveGoalParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDiscardMsgParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMemoTimeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDurationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cForwardParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cEmitParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDemandParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cAnswerParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cReplyReqParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDelayParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cMsgCondParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cEndActorParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cUpdateResourceParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cCodeRunParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cAnyActionParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cExecParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		
		///*
		// * StateAction
		// */ StateAction:
		//	GuardedStateAction | IfSolvedAction | Print | PrintCurMsg | SolveGoal | DiscardMsg | MemoTime | Duration | Forward |
		//	Emit | Demand | Answer | ReplyReq | Delay | MsgCond | EndActor | UpdateResource | CodeRun | AnyAction | Exec //extra code
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//GuardedStateAction | IfSolvedAction | Print | PrintCurMsg | SolveGoal | DiscardMsg | MemoTime | Duration | Forward |
		//Emit | Demand | Answer | ReplyReq | Delay | MsgCond | EndActor | UpdateResource | CodeRun | AnyAction | Exec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GuardedStateAction
		public RuleCall getGuardedStateActionParserRuleCall_0() { return cGuardedStateActionParserRuleCall_0; }
		
		//IfSolvedAction
		public RuleCall getIfSolvedActionParserRuleCall_1() { return cIfSolvedActionParserRuleCall_1; }
		
		////pre
		//Print
		public RuleCall getPrintParserRuleCall_2() { return cPrintParserRuleCall_2; }
		
		//PrintCurMsg
		public RuleCall getPrintCurMsgParserRuleCall_3() { return cPrintCurMsgParserRuleCall_3; }
		
		//SolveGoal
		public RuleCall getSolveGoalParserRuleCall_4() { return cSolveGoalParserRuleCall_4; }
		
		//DiscardMsg
		public RuleCall getDiscardMsgParserRuleCall_5() { return cDiscardMsgParserRuleCall_5; }
		
		//MemoTime
		public RuleCall getMemoTimeParserRuleCall_6() { return cMemoTimeParserRuleCall_6; }
		
		//Duration
		public RuleCall getDurationParserRuleCall_7() { return cDurationParserRuleCall_7; }
		
		////general
		//Forward
		public RuleCall getForwardParserRuleCall_8() { return cForwardParserRuleCall_8; }
		
		//Emit
		public RuleCall getEmitParserRuleCall_9() { return cEmitParserRuleCall_9; }
		
		//Demand
		public RuleCall getDemandParserRuleCall_10() { return cDemandParserRuleCall_10; }
		
		//Answer
		public RuleCall getAnswerParserRuleCall_11() { return cAnswerParserRuleCall_11; }
		
		//ReplyReq
		public RuleCall getReplyReqParserRuleCall_12() { return cReplyReqParserRuleCall_12; }
		
		//Delay
		public RuleCall getDelayParserRuleCall_13() { return cDelayParserRuleCall_13; }
		
		//MsgCond
		public RuleCall getMsgCondParserRuleCall_14() { return cMsgCondParserRuleCall_14; }
		
		//EndActor
		public RuleCall getEndActorParserRuleCall_15() { return cEndActorParserRuleCall_15; }
		
		//UpdateResource
		public RuleCall getUpdateResourceParserRuleCall_16() { return cUpdateResourceParserRuleCall_16; }
		
		////qak kotlin
		//CodeRun
		public RuleCall getCodeRunParserRuleCall_17() { return cCodeRunParserRuleCall_17; }
		
		//AnyAction
		public RuleCall getAnyActionParserRuleCall_18() { return cAnyActionParserRuleCall_18; }
		
		//Exec
		public RuleCall getExecParserRuleCall_19() { return cExecParserRuleCall_19; }
	}
	public class IfSolvedActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.IfSolvedAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfSolvedActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfSolvedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSolvedactionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSolvedactionsStateActionParserRuleCall_3_0 = (RuleCall)cSolvedactionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cNotsolvedactionsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cNotsolvedactionsStateActionParserRuleCall_5_2_0 = (RuleCall)cNotsolvedactionsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//IfSolvedAction:
		//	{IfSolvedAction} "ifSolved" "{" solvedactions+=StateAction* "}" ("else" "{" notsolvedactions+=StateAction* "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfSolvedAction} "ifSolved" "{" solvedactions+=StateAction* "}" ("else" "{" notsolvedactions+=StateAction* "}")?
		public Group getGroup() { return cGroup; }
		
		//{IfSolvedAction}
		public Action getIfSolvedActionAction_0() { return cIfSolvedActionAction_0; }
		
		//"ifSolved"
		public Keyword getIfSolvedKeyword_1() { return cIfSolvedKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//solvedactions+=StateAction*
		public Assignment getSolvedactionsAssignment_3() { return cSolvedactionsAssignment_3; }
		
		//StateAction
		public RuleCall getSolvedactionsStateActionParserRuleCall_3_0() { return cSolvedactionsStateActionParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//("else" "{" notsolvedactions+=StateAction* "}")?
		public Group getGroup_5() { return cGroup_5; }
		
		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//notsolvedactions+=StateAction*
		public Assignment getNotsolvedactionsAssignment_5_2() { return cNotsolvedactionsAssignment_5_2; }
		
		//StateAction
		public RuleCall getNotsolvedactionsStateActionParserRuleCall_5_2_0() { return cNotsolvedactionsStateActionParserRuleCall_5_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class GuardedStateActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.GuardedStateAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardedStateActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardAnyActionParserRuleCall_2_0 = (RuleCall)cGuardAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOkactionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOkactionsStateActionParserRuleCall_4_0 = (RuleCall)cOkactionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cKoactionsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cKoactionsStateActionParserRuleCall_6_2_0 = (RuleCall)cKoactionsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//GuardedStateAction:
		//	{GuardedStateAction} "if" guard=AnyAction "{" okactions+=StateAction* "}" ("else" "{" koactions+=StateAction* "}")?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GuardedStateAction} "if" guard=AnyAction "{" okactions+=StateAction* "}" ("else" "{" koactions+=StateAction* "}")?
		public Group getGroup() { return cGroup; }
		
		//{GuardedStateAction}
		public Action getGuardedStateActionAction_0() { return cGuardedStateActionAction_0; }
		
		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//guard=AnyAction
		public Assignment getGuardAssignment_2() { return cGuardAssignment_2; }
		
		//AnyAction
		public RuleCall getGuardAnyActionParserRuleCall_2_0() { return cGuardAnyActionParserRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//okactions+=StateAction*
		public Assignment getOkactionsAssignment_4() { return cOkactionsAssignment_4; }
		
		//StateAction
		public RuleCall getOkactionsStateActionParserRuleCall_4_0() { return cOkactionsStateActionParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//("else" "{" koactions+=StateAction* "}")?
		public Group getGroup_6() { return cGroup_6; }
		
		//"else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//koactions+=StateAction*
		public Assignment getKoactionsAssignment_6_2() { return cKoactionsAssignment_6_2; }
		
		//StateAction
		public RuleCall getKoactionsStateActionParserRuleCall_6_2_0() { return cKoactionsStateActionParserRuleCall_6_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
	}
	public class PrintCurMsgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.PrintCurMsg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintCurMsgAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintCurrentMessageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PrintCurMsg:
		//	{PrintCurMsg} "printCurrentMessage";
		@Override public ParserRule getRule() { return rule; }
		
		//{PrintCurMsg} "printCurrentMessage"
		public Group getGroup() { return cGroup; }
		
		//{PrintCurMsg}
		public Action getPrintCurMsgAction_0() { return cPrintCurMsgAction_0; }
		
		//"printCurrentMessage"
		public Keyword getPrintCurrentMessageKeyword_1() { return cPrintCurrentMessageKeyword_1; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintlnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsPHeadParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Print:
		//	{Print} "println" "(" args=PHead ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{Print} "println" "(" args=PHead ")"
		public Group getGroup() { return cGroup; }
		
		//{Print}
		public Action getPrintAction_0() { return cPrintAction_0; }
		
		//"println"
		public Keyword getPrintlnKeyword_1() { return cPrintlnKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//args=PHead
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }
		
		//PHead
		public RuleCall getArgsPHeadParserRuleCall_3_0() { return cArgsPHeadParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SolveGoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.SolveGoal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSolveGoalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSolveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGoalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGoalPHeadParserRuleCall_3_0 = (RuleCall)cGoalAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cResVarAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cResVarVariableParserRuleCall_4_1_0 = (RuleCall)cResVarAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SolveGoal:
		//	{SolveGoal} "solve" "(" goal=PHead ("," resVar=Variable)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{SolveGoal} "solve" "(" goal=PHead ("," resVar=Variable)? ")"
		public Group getGroup() { return cGroup; }
		
		//{SolveGoal}
		public Action getSolveGoalAction_0() { return cSolveGoalAction_0; }
		
		//"solve"
		public Keyword getSolveKeyword_1() { return cSolveKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//goal=PHead
		public Assignment getGoalAssignment_3() { return cGoalAssignment_3; }
		
		//PHead
		public RuleCall getGoalPHeadParserRuleCall_3_0() { return cGoalPHeadParserRuleCall_3_0; }
		
		//("," resVar=Variable)?
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//resVar=Variable
		public Assignment getResVarAssignment_4_1() { return cResVarAssignment_4_1; }
		
		//Variable
		public RuleCall getResVarVariableParserRuleCall_4_1_0() { return cResVarVariableParserRuleCall_4_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DiscardMsgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.DiscardMsg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiscardMsgAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDiscardMsgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDiscardAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cDiscardOnKeyword_2_0_0 = (Keyword)cDiscardAssignment_2_0.eContents().get(0);
		private final Keyword cOffKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//DiscardMsg:
		//	{DiscardMsg} "discardMsg" (discard?='On' | 'Off');
		@Override public ParserRule getRule() { return rule; }
		
		//{DiscardMsg} "discardMsg" (discard?='On' | 'Off')
		public Group getGroup() { return cGroup; }
		
		//{DiscardMsg}
		public Action getDiscardMsgAction_0() { return cDiscardMsgAction_0; }
		
		//"discardMsg"
		public Keyword getDiscardMsgKeyword_1() { return cDiscardMsgKeyword_1; }
		
		//(discard?='On' | 'Off')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//discard?='On'
		public Assignment getDiscardAssignment_2_0() { return cDiscardAssignment_2_0; }
		
		//'On'
		public Keyword getDiscardOnKeyword_2_0_0() { return cDiscardOnKeyword_2_0_0; }
		
		//'Off'
		public Keyword getOffKeyword_2_1() { return cOffKeyword_2_1; }
	}
	public class MemoTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.MemoTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMemoTimeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMemoCurrentTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStoreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStoreVARIDTerminalRuleCall_2_0 = (RuleCall)cStoreAssignment_2.eContents().get(0);
		
		//MemoTime:
		//	{MemoTime} "memoCurrentTime" store=VARID;
		@Override public ParserRule getRule() { return rule; }
		
		//{MemoTime} "memoCurrentTime" store=VARID
		public Group getGroup() { return cGroup; }
		
		//{MemoTime}
		public Action getMemoTimeAction_0() { return cMemoTimeAction_0; }
		
		//"memoCurrentTime"
		public Keyword getMemoCurrentTimeKeyword_1() { return cMemoCurrentTimeKeyword_1; }
		
		//store=VARID
		public Assignment getStoreAssignment_2() { return cStoreAssignment_2; }
		
		//VARID
		public RuleCall getStoreVARIDTerminalRuleCall_2_0() { return cStoreVARIDTerminalRuleCall_2_0; }
	}
	public class DurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Duration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDurationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetDurationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStoreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStoreVARIDTerminalRuleCall_2_0 = (RuleCall)cStoreAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStartVARIDTerminalRuleCall_4_0 = (RuleCall)cStartAssignment_4.eContents().get(0);
		
		//Duration:
		//	{Duration} "setDuration" store=VARID "from" start=VARID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Duration} "setDuration" store=VARID "from" start=VARID
		public Group getGroup() { return cGroup; }
		
		//{Duration}
		public Action getDurationAction_0() { return cDurationAction_0; }
		
		//"setDuration"
		public Keyword getSetDurationKeyword_1() { return cSetDurationKeyword_1; }
		
		//store=VARID
		public Assignment getStoreAssignment_2() { return cStoreAssignment_2; }
		
		//VARID
		public RuleCall getStoreVARIDTerminalRuleCall_2_0() { return cStoreVARIDTerminalRuleCall_2_0; }
		
		//"from"
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//start=VARID
		public Assignment getStartAssignment_4() { return cStartAssignment_4; }
		
		//VARID
		public RuleCall getStartVARIDTerminalRuleCall_4_0() { return cStartVARIDTerminalRuleCall_4_0; }
	}
	public class ForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Forward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDestQActorDeclarationCrossReference_1_0 = (CrossReference)cDestAssignment_1.eContents().get(0);
		private final RuleCall cDestQActorDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cDestQActorDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgrefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMsgrefDispatchCrossReference_3_0 = (CrossReference)cMsgrefAssignment_3.eContents().get(0);
		private final RuleCall cMsgrefDispatchIDTerminalRuleCall_3_0_1 = (RuleCall)cMsgrefDispatchCrossReference_3_0.eContents().get(1);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValPHeadParserRuleCall_5_0 = (RuleCall)cValAssignment_5.eContents().get(0);
		
		//Forward:
		//	"forward" dest=[QActorDeclaration] "-m" msgref=[Dispatch] ":" val=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"forward" dest=[QActorDeclaration] "-m" msgref=[Dispatch] ":" val=PHead
		public Group getGroup() { return cGroup; }
		
		//"forward"
		public Keyword getForwardKeyword_0() { return cForwardKeyword_0; }
		
		//dest=[QActorDeclaration]
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }
		
		//[QActorDeclaration]
		public CrossReference getDestQActorDeclarationCrossReference_1_0() { return cDestQActorDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getDestQActorDeclarationIDTerminalRuleCall_1_0_1() { return cDestQActorDeclarationIDTerminalRuleCall_1_0_1; }
		
		//"-m"
		public Keyword getMKeyword_2() { return cMKeyword_2; }
		
		//msgref=[Dispatch]
		public Assignment getMsgrefAssignment_3() { return cMsgrefAssignment_3; }
		
		//[Dispatch]
		public CrossReference getMsgrefDispatchCrossReference_3_0() { return cMsgrefDispatchCrossReference_3_0; }
		
		//ID
		public RuleCall getMsgrefDispatchIDTerminalRuleCall_3_0_1() { return cMsgrefDispatchIDTerminalRuleCall_3_0_1; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//val=PHead
		public Assignment getValAssignment_5() { return cValAssignment_5; }
		
		//PHead
		public RuleCall getValPHeadParserRuleCall_5_0() { return cValPHeadParserRuleCall_5_0; }
	}
	public class EmitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Emit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMsgrefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMsgrefEventCrossReference_1_0 = (CrossReference)cMsgrefAssignment_1.eContents().get(0);
		private final RuleCall cMsgrefEventIDTerminalRuleCall_1_0_1 = (RuleCall)cMsgrefEventCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValPHeadParserRuleCall_3_0 = (RuleCall)cValAssignment_3.eContents().get(0);
		
		//Emit:
		//	"emit" msgref=[Event] ":" val=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"emit" msgref=[Event] ":" val=PHead
		public Group getGroup() { return cGroup; }
		
		//"emit"
		public Keyword getEmitKeyword_0() { return cEmitKeyword_0; }
		
		//msgref=[Event]
		public Assignment getMsgrefAssignment_1() { return cMsgrefAssignment_1; }
		
		//[Event]
		public CrossReference getMsgrefEventCrossReference_1_0() { return cMsgrefEventCrossReference_1_0; }
		
		//ID
		public RuleCall getMsgrefEventIDTerminalRuleCall_1_0_1() { return cMsgrefEventIDTerminalRuleCall_1_0_1; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//val=PHead
		public Assignment getValAssignment_3() { return cValAssignment_3; }
		
		//PHead
		public RuleCall getValPHeadParserRuleCall_3_0() { return cValPHeadParserRuleCall_3_0; }
	}
	public class DemandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Demand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDestQActorDeclarationCrossReference_1_0 = (CrossReference)cDestAssignment_1.eContents().get(0);
		private final RuleCall cDestQActorDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cDestQActorDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgrefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMsgrefRequestCrossReference_3_0 = (CrossReference)cMsgrefAssignment_3.eContents().get(0);
		private final RuleCall cMsgrefRequestIDTerminalRuleCall_3_0_1 = (RuleCall)cMsgrefRequestCrossReference_3_0.eContents().get(1);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValPHeadParserRuleCall_5_0 = (RuleCall)cValAssignment_5.eContents().get(0);
		
		//Demand:
		//	"request" dest=[QActorDeclaration] "-m" msgref=[Request] ":" val=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"request" dest=[QActorDeclaration] "-m" msgref=[Request] ":" val=PHead
		public Group getGroup() { return cGroup; }
		
		//"request"
		public Keyword getRequestKeyword_0() { return cRequestKeyword_0; }
		
		//dest=[QActorDeclaration]
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }
		
		//[QActorDeclaration]
		public CrossReference getDestQActorDeclarationCrossReference_1_0() { return cDestQActorDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getDestQActorDeclarationIDTerminalRuleCall_1_0_1() { return cDestQActorDeclarationIDTerminalRuleCall_1_0_1; }
		
		//"-m"
		public Keyword getMKeyword_2() { return cMKeyword_2; }
		
		//msgref=[Request]
		public Assignment getMsgrefAssignment_3() { return cMsgrefAssignment_3; }
		
		//[Request]
		public CrossReference getMsgrefRequestCrossReference_3_0() { return cMsgrefRequestCrossReference_3_0; }
		
		//ID
		public RuleCall getMsgrefRequestIDTerminalRuleCall_3_0_1() { return cMsgrefRequestIDTerminalRuleCall_3_0_1; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//val=PHead
		public Assignment getValAssignment_5() { return cValAssignment_5; }
		
		//PHead
		public RuleCall getValPHeadParserRuleCall_5_0() { return cValPHeadParserRuleCall_5_0; }
	}
	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Answer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplyToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReqrefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReqrefRequestCrossReference_1_0 = (CrossReference)cReqrefAssignment_1.eContents().get(0);
		private final RuleCall cReqrefRequestIDTerminalRuleCall_1_0_1 = (RuleCall)cReqrefRequestCrossReference_1_0.eContents().get(1);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgrefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMsgrefReplyCrossReference_3_0 = (CrossReference)cMsgrefAssignment_3.eContents().get(0);
		private final RuleCall cMsgrefReplyIDTerminalRuleCall_3_0_1 = (RuleCall)cMsgrefReplyCrossReference_3_0.eContents().get(1);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValPHeadParserRuleCall_5_0 = (RuleCall)cValAssignment_5.eContents().get(0);
		
		//Answer:
		//	"replyTo" reqref=[Request] "with" msgref=[Reply] ":" val=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"replyTo" reqref=[Request] "with" msgref=[Reply] ":" val=PHead
		public Group getGroup() { return cGroup; }
		
		//"replyTo"
		public Keyword getReplyToKeyword_0() { return cReplyToKeyword_0; }
		
		//reqref=[Request]
		public Assignment getReqrefAssignment_1() { return cReqrefAssignment_1; }
		
		//[Request]
		public CrossReference getReqrefRequestCrossReference_1_0() { return cReqrefRequestCrossReference_1_0; }
		
		//ID
		public RuleCall getReqrefRequestIDTerminalRuleCall_1_0_1() { return cReqrefRequestIDTerminalRuleCall_1_0_1; }
		
		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//msgref=[Reply]
		public Assignment getMsgrefAssignment_3() { return cMsgrefAssignment_3; }
		
		//[Reply]
		public CrossReference getMsgrefReplyCrossReference_3_0() { return cMsgrefReplyCrossReference_3_0; }
		
		//ID
		public RuleCall getMsgrefReplyIDTerminalRuleCall_3_0_1() { return cMsgrefReplyIDTerminalRuleCall_3_0_1; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//val=PHead
		public Assignment getValAssignment_5() { return cValAssignment_5; }
		
		//PHead
		public RuleCall getValPHeadParserRuleCall_5_0() { return cValPHeadParserRuleCall_5_0; }
	}
	public class ReplyReqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.ReplyReq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAskForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReqrefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReqrefRequestCrossReference_1_0 = (CrossReference)cReqrefAssignment_1.eContents().get(0);
		private final RuleCall cReqrefRequestIDTerminalRuleCall_1_0_1 = (RuleCall)cReqrefRequestCrossReference_1_0.eContents().get(1);
		private final Keyword cRequestKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMsgrefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMsgrefRequestCrossReference_3_0 = (CrossReference)cMsgrefAssignment_3.eContents().get(0);
		private final RuleCall cMsgrefRequestIDTerminalRuleCall_3_0_1 = (RuleCall)cMsgrefRequestCrossReference_3_0.eContents().get(1);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValPHeadParserRuleCall_5_0 = (RuleCall)cValAssignment_5.eContents().get(0);
		
		//ReplyReq:
		//	"askFor" reqref=[Request] "request" msgref=[Request] ":" val=PHead;
		@Override public ParserRule getRule() { return rule; }
		
		//"askFor" reqref=[Request] "request" msgref=[Request] ":" val=PHead
		public Group getGroup() { return cGroup; }
		
		//"askFor"
		public Keyword getAskForKeyword_0() { return cAskForKeyword_0; }
		
		//reqref=[Request]
		public Assignment getReqrefAssignment_1() { return cReqrefAssignment_1; }
		
		//[Request]
		public CrossReference getReqrefRequestCrossReference_1_0() { return cReqrefRequestCrossReference_1_0; }
		
		//ID
		public RuleCall getReqrefRequestIDTerminalRuleCall_1_0_1() { return cReqrefRequestIDTerminalRuleCall_1_0_1; }
		
		//"request"
		public Keyword getRequestKeyword_2() { return cRequestKeyword_2; }
		
		//msgref=[Request]
		public Assignment getMsgrefAssignment_3() { return cMsgrefAssignment_3; }
		
		//[Request]
		public CrossReference getMsgrefRequestCrossReference_3_0() { return cMsgrefRequestCrossReference_3_0; }
		
		//ID
		public RuleCall getMsgrefRequestIDTerminalRuleCall_3_0_1() { return cMsgrefRequestIDTerminalRuleCall_3_0_1; }
		
		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//val=PHead
		public Assignment getValAssignment_5() { return cValAssignment_5; }
		
		//PHead
		public RuleCall getValPHeadParserRuleCall_5_0() { return cValPHeadParserRuleCall_5_0; }
	}
	public class DelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Delay");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDelayIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDelayVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDelayVrefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDelaySolParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Delay:
		//	DelayInt | DelayVar | DelayVref | DelaySol;
		@Override public ParserRule getRule() { return rule; }
		
		//DelayInt | DelayVar | DelayVref | DelaySol
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DelayInt
		public RuleCall getDelayIntParserRuleCall_0() { return cDelayIntParserRuleCall_0; }
		
		//DelayVar
		public RuleCall getDelayVarParserRuleCall_1() { return cDelayVarParserRuleCall_1; }
		
		//DelayVref
		public RuleCall getDelayVrefParserRuleCall_2() { return cDelayVrefParserRuleCall_2; }
		
		//DelaySol
		public RuleCall getDelaySolParserRuleCall_3() { return cDelaySolParserRuleCall_3; }
	}
	public class DelayIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.DelayInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_1_0 = (RuleCall)cTimeAssignment_1.eContents().get(0);
		
		//DelayInt:
		//	"delay" time=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"delay" time=INT
		public Group getGroup() { return cGroup; }
		
		//"delay"
		public Keyword getDelayKeyword_0() { return cDelayKeyword_0; }
		
		//time=INT
		public Assignment getTimeAssignment_1() { return cTimeAssignment_1; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_1_0() { return cTimeINTTerminalRuleCall_1_0; }
	}
	public class DelayVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.DelayVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelayVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefvarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefvarVariableParserRuleCall_1_0 = (RuleCall)cRefvarAssignment_1.eContents().get(0);
		
		//DelayVar:
		//	"delayVar" refvar=Variable;
		@Override public ParserRule getRule() { return rule; }
		
		//"delayVar" refvar=Variable
		public Group getGroup() { return cGroup; }
		
		//"delayVar"
		public Keyword getDelayVarKeyword_0() { return cDelayVarKeyword_0; }
		
		//refvar=Variable
		public Assignment getRefvarAssignment_1() { return cRefvarAssignment_1; }
		
		//Variable
		public RuleCall getRefvarVariableParserRuleCall_1_0() { return cRefvarVariableParserRuleCall_1_0; }
	}
	public class DelayVrefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.DelayVref");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelayVarRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReftimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReftimeVarRefParserRuleCall_1_0 = (RuleCall)cReftimeAssignment_1.eContents().get(0);
		
		//DelayVref:
		//	"delayVarRef" reftime=VarRef;
		@Override public ParserRule getRule() { return rule; }
		
		//"delayVarRef" reftime=VarRef
		public Group getGroup() { return cGroup; }
		
		//"delayVarRef"
		public Keyword getDelayVarRefKeyword_0() { return cDelayVarRefKeyword_0; }
		
		//reftime=VarRef
		public Assignment getReftimeAssignment_1() { return cReftimeAssignment_1; }
		
		//VarRef
		public RuleCall getReftimeVarRefParserRuleCall_1_0() { return cReftimeVarRefParserRuleCall_1_0; }
	}
	public class DelaySolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.DelaySol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelaySolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefsoltimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefsoltimeVarSolRefParserRuleCall_1_0 = (RuleCall)cRefsoltimeAssignment_1.eContents().get(0);
		
		//DelaySol:
		//	"delaySol" refsoltime=VarSolRef;
		@Override public ParserRule getRule() { return rule; }
		
		//"delaySol" refsoltime=VarSolRef
		public Group getGroup() { return cGroup; }
		
		//"delaySol"
		public Keyword getDelaySolKeyword_0() { return cDelaySolKeyword_0; }
		
		//refsoltime=VarSolRef
		public Assignment getRefsoltimeAssignment_1() { return cRefsoltimeAssignment_1; }
		
		//VarSolRef
		public RuleCall getRefsoltimeVarSolRefParserRuleCall_1_0() { return cRefsoltimeVarSolRefParserRuleCall_1_0; }
	}
	public class MsgCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.MsgCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnMsgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMessageMessageCrossReference_2_0 = (CrossReference)cMessageAssignment_2.eContents().get(0);
		private final RuleCall cMessageMessageIDTerminalRuleCall_2_0_1 = (RuleCall)cMessageMessageCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMsgAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMsgPHeadParserRuleCall_4_0 = (RuleCall)cMsgAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCondactionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCondactionsStateActionParserRuleCall_7_0 = (RuleCall)cCondactionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cElseKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cIfnotAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cIfnotNoMsgCondParserRuleCall_9_1_0 = (RuleCall)cIfnotAssignment_9_1.eContents().get(0);
		
		//MsgCond:
		//	"onMsg" "(" message=[Message] ":" msg=PHead ")" "{" condactions+=StateAction* "}" ("else" ifnot=NoMsgCond)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"onMsg" "(" message=[Message] ":" msg=PHead ")" "{" condactions+=StateAction* "}" ("else" ifnot=NoMsgCond)?
		public Group getGroup() { return cGroup; }
		
		//"onMsg"
		public Keyword getOnMsgKeyword_0() { return cOnMsgKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//message=[Message]
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }
		
		//[Message]
		public CrossReference getMessageMessageCrossReference_2_0() { return cMessageMessageCrossReference_2_0; }
		
		//ID
		public RuleCall getMessageMessageIDTerminalRuleCall_2_0_1() { return cMessageMessageIDTerminalRuleCall_2_0_1; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//msg=PHead
		public Assignment getMsgAssignment_4() { return cMsgAssignment_4; }
		
		//PHead
		public RuleCall getMsgPHeadParserRuleCall_4_0() { return cMsgPHeadParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//condactions+=StateAction*
		public Assignment getCondactionsAssignment_7() { return cCondactionsAssignment_7; }
		
		//StateAction
		public RuleCall getCondactionsStateActionParserRuleCall_7_0() { return cCondactionsStateActionParserRuleCall_7_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//("else" ifnot=NoMsgCond)?
		public Group getGroup_9() { return cGroup_9; }
		
		//"else"
		public Keyword getElseKeyword_9_0() { return cElseKeyword_9_0; }
		
		//ifnot=NoMsgCond
		public Assignment getIfnotAssignment_9_1() { return cIfnotAssignment_9_1; }
		
		//NoMsgCond
		public RuleCall getIfnotNoMsgCondParserRuleCall_9_1_0() { return cIfnotNoMsgCondParserRuleCall_9_1_0; }
	}
	public class EndActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.EndActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTerminateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgINTTerminalRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		
		//EndActor:
		//	"terminate" arg=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"terminate" arg=INT
		public Group getGroup() { return cGroup; }
		
		//"terminate"
		public Keyword getTerminateKeyword_0() { return cTerminateKeyword_0; }
		
		//arg=INT
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//INT
		public RuleCall getArgINTTerminalRuleCall_1_0() { return cArgINTTerminalRuleCall_1_0; }
	}
	public class UpdateResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.UpdateResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUpdateResourceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUpdateResourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValAnyActionParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//UpdateResource:
		//	{UpdateResource} "updateResource" val=AnyAction;
		@Override public ParserRule getRule() { return rule; }
		
		//{UpdateResource} "updateResource" val=AnyAction
		public Group getGroup() { return cGroup; }
		
		//{UpdateResource}
		public Action getUpdateResourceAction_0() { return cUpdateResourceAction_0; }
		
		//"updateResource"
		public Keyword getUpdateResourceKeyword_1() { return cUpdateResourceKeyword_1; }
		
		//val=AnyAction
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//AnyAction
		public RuleCall getValAnyActionParserRuleCall_2_0() { return cValAnyActionParserRuleCall_2_0; }
	}
	public class NoMsgCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.NoMsgCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNoMsgCondAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNotcondactionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNotcondactionsStateActionParserRuleCall_2_0 = (RuleCall)cNotcondactionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NoMsgCond:
		//	{NoMsgCond} "{" notcondactions+=StateAction* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{NoMsgCond} "{" notcondactions+=StateAction* "}"
		public Group getGroup() { return cGroup; }
		
		//{NoMsgCond}
		public Action getNoMsgCondAction_0() { return cNoMsgCondAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//notcondactions+=StateAction*
		public Assignment getNotcondactionsAssignment_2() { return cNotcondactionsAssignment_2; }
		
		//StateAction
		public RuleCall getNotcondactionsStateActionParserRuleCall_2_0() { return cNotcondactionsStateActionParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AnyActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.AnyAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnyActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyKCODETerminalRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AnyAction:
		//	{AnyAction} "[" body=KCODE "]";
		@Override public ParserRule getRule() { return rule; }
		
		//{AnyAction} "[" body=KCODE "]"
		public Group getGroup() { return cGroup; }
		
		//{AnyAction}
		public Action getAnyActionAction_0() { return cAnyActionAction_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//body=KCODE
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//KCODE
		public RuleCall getBodyKCODETerminalRuleCall_2_0() { return cBodyKCODETerminalRuleCall_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class CodeRunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.CodeRun");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCodeRunActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCodeRunSimpleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////"[" body=STRING "]"; 
		//CodeRun:
		//	CodeRunActor | CodeRunSimple;
		@Override public ParserRule getRule() { return rule; }
		
		//CodeRunActor | CodeRunSimple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CodeRunActor
		public RuleCall getCodeRunActorParserRuleCall_0() { return cCodeRunActorParserRuleCall_0; }
		
		//CodeRunSimple
		public RuleCall getCodeRunSimpleParserRuleCall_1() { return cCodeRunSimpleParserRuleCall_1; }
	}
	public class CodeRunActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.CodeRunActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQrunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAitemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAitemQualifiedNameParserRuleCall_1_0 = (RuleCall)cAitemAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMyselfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgsPHeadParserRuleCall_4_1_0 = (RuleCall)cArgsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cArgsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cArgsPHeadParserRuleCall_4_2_1_0 = (RuleCall)cArgsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CodeRunActor:
		//	"qrun" aitem=QualifiedName "(" "myself" ("," args+=PHead ("," args+=PHead)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"qrun" aitem=QualifiedName "(" "myself" ("," args+=PHead ("," args+=PHead)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//"qrun"
		public Keyword getQrunKeyword_0() { return cQrunKeyword_0; }
		
		//aitem=QualifiedName
		public Assignment getAitemAssignment_1() { return cAitemAssignment_1; }
		
		//QualifiedName
		public RuleCall getAitemQualifiedNameParserRuleCall_1_0() { return cAitemQualifiedNameParserRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//"myself"
		public Keyword getMyselfKeyword_3() { return cMyselfKeyword_3; }
		
		//("," args+=PHead ("," args+=PHead)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//args+=PHead
		public Assignment getArgsAssignment_4_1() { return cArgsAssignment_4_1; }
		
		//PHead
		public RuleCall getArgsPHeadParserRuleCall_4_1_0() { return cArgsPHeadParserRuleCall_4_1_0; }
		
		//("," args+=PHead)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//args+=PHead
		public Assignment getArgsAssignment_4_2_1() { return cArgsAssignment_4_2_1; }
		
		//PHead
		public RuleCall getArgsPHeadParserRuleCall_4_2_1_0() { return cArgsPHeadParserRuleCall_4_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CodeRunSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.CodeRunSimple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBitemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBitemQualifiedNameParserRuleCall_1_0 = (RuleCall)cBitemAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsPHeadParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsPHeadParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CodeRunSimple:
		//	"run" bitem=QualifiedName "(" (args+=PHead ("," args+=PHead)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"run" bitem=QualifiedName "(" (args+=PHead ("," args+=PHead)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//"run"
		public Keyword getRunKeyword_0() { return cRunKeyword_0; }
		
		//bitem=QualifiedName
		public Assignment getBitemAssignment_1() { return cBitemAssignment_1; }
		
		//QualifiedName
		public RuleCall getBitemQualifiedNameParserRuleCall_1_0() { return cBitemQualifiedNameParserRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(args+=PHead ("," args+=PHead)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//args+=PHead
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }
		
		//PHead
		public RuleCall getArgsPHeadParserRuleCall_3_0_0() { return cArgsPHeadParserRuleCall_3_0_0; }
		
		//("," args+=PHead)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//args+=PHead
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }
		
		//PHead
		public RuleCall getArgsPHeadParserRuleCall_3_1_1_0() { return cArgsPHeadParserRuleCall_3_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Exec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineExecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionSTRINGTerminalRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		
		//Exec:
		//	"machineExec" action=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"machineExec" action=STRING
		public Group getGroup() { return cGroup; }
		
		//"machineExec"
		public Keyword getMachineExecKeyword_0() { return cMachineExecKeyword_0; }
		
		//action=STRING
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_1_0() { return cActionSTRINGTerminalRuleCall_1_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Transition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmptyTransitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonEmptyTransitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * Transition
		// */ Transition:
		//	EmptyTransition | NonEmptyTransition;
		@Override public ParserRule getRule() { return rule; }
		
		//EmptyTransition | NonEmptyTransition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EmptyTransition
		public RuleCall getEmptyTransitionParserRuleCall_0() { return cEmptyTransitionParserRuleCall_0; }
		
		//NonEmptyTransition
		public RuleCall getNonEmptyTransitionParserRuleCall_1() { return cNonEmptyTransitionParserRuleCall_1; }
	}
	public class EmptyTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.EmptyTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetStateStateCrossReference_1_0 = (CrossReference)cTargetStateAssignment_1.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetStateStateCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEguardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEguardAnyActionParserRuleCall_2_1_0 = (RuleCall)cEguardAssignment_2_1.eContents().get(0);
		private final Keyword cElseKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cOthertargetStateAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cOthertargetStateStateCrossReference_2_3_0 = (CrossReference)cOthertargetStateAssignment_2_3.eContents().get(0);
		private final RuleCall cOthertargetStateStateIDTerminalRuleCall_2_3_0_1 = (RuleCall)cOthertargetStateStateCrossReference_2_3_0.eContents().get(1);
		
		//EmptyTransition:
		//	"Goto" targetState=[State] ("if" eguard=AnyAction "else" othertargetState=[State])?;
		@Override public ParserRule getRule() { return rule; }
		
		//"Goto" targetState=[State] ("if" eguard=AnyAction "else" othertargetState=[State])?
		public Group getGroup() { return cGroup; }
		
		//"Goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//targetState=[State]
		public Assignment getTargetStateAssignment_1() { return cTargetStateAssignment_1; }
		
		//[State]
		public CrossReference getTargetStateStateCrossReference_1_0() { return cTargetStateStateCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_1_0_1() { return cTargetStateStateIDTerminalRuleCall_1_0_1; }
		
		//("if" eguard=AnyAction "else" othertargetState=[State])?
		public Group getGroup_2() { return cGroup_2; }
		
		//"if"
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//eguard=AnyAction
		public Assignment getEguardAssignment_2_1() { return cEguardAssignment_2_1; }
		
		//AnyAction
		public RuleCall getEguardAnyActionParserRuleCall_2_1_0() { return cEguardAnyActionParserRuleCall_2_1_0; }
		
		//"else"
		public Keyword getElseKeyword_2_2() { return cElseKeyword_2_2; }
		
		//othertargetState=[State]
		public Assignment getOthertargetStateAssignment_2_3() { return cOthertargetStateAssignment_2_3; }
		
		//[State]
		public CrossReference getOthertargetStateStateCrossReference_2_3_0() { return cOthertargetStateStateCrossReference_2_3_0; }
		
		//ID
		public RuleCall getOthertargetStateStateIDTerminalRuleCall_2_3_0_1() { return cOthertargetStateStateIDTerminalRuleCall_2_3_0_1; }
	}
	public class NonEmptyTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.NonEmptyTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDurationTimeoutParserRuleCall_2_0 = (RuleCall)cDurationAssignment_2.eContents().get(0);
		private final Assignment cTransAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransInputTransitionParserRuleCall_3_0 = (RuleCall)cTransAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseemptyAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseemptyEmptyTransitionParserRuleCall_4_1_0 = (RuleCall)cElseemptyAssignment_4_1.eContents().get(0);
		
		//NonEmptyTransition:
		//	"Transition" name=ID duration=Timeout? trans+=InputTransition* ("else" elseempty=EmptyTransition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"Transition" name=ID duration=Timeout? trans+=InputTransition* ("else" elseempty=EmptyTransition)?
		public Group getGroup() { return cGroup; }
		
		//"Transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//duration=Timeout?
		public Assignment getDurationAssignment_2() { return cDurationAssignment_2; }
		
		//Timeout
		public RuleCall getDurationTimeoutParserRuleCall_2_0() { return cDurationTimeoutParserRuleCall_2_0; }
		
		//trans+=InputTransition*
		public Assignment getTransAssignment_3() { return cTransAssignment_3; }
		
		//InputTransition
		public RuleCall getTransInputTransitionParserRuleCall_3_0() { return cTransInputTransitionParserRuleCall_3_0; }
		
		//("else" elseempty=EmptyTransition)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//elseempty=EmptyTransition
		public Assignment getElseemptyAssignment_4_1() { return cElseemptyAssignment_4_1; }
		
		//EmptyTransition
		public RuleCall getElseemptyEmptyTransitionParserRuleCall_4_1_0() { return cElseemptyEmptyTransitionParserRuleCall_4_1_0; }
	}
	public class TimeoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Timeout");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeoutIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeoutVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTimeoutSolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimeoutVarRefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Timeout:
		//	TimeoutInt | TimeoutVar | TimeoutSol | TimeoutVarRef;
		@Override public ParserRule getRule() { return rule; }
		
		//TimeoutInt | TimeoutVar | TimeoutSol | TimeoutVarRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TimeoutInt
		public RuleCall getTimeoutIntParserRuleCall_0() { return cTimeoutIntParserRuleCall_0; }
		
		//TimeoutVar
		public RuleCall getTimeoutVarParserRuleCall_1() { return cTimeoutVarParserRuleCall_1; }
		
		//TimeoutSol
		public RuleCall getTimeoutSolParserRuleCall_2() { return cTimeoutSolParserRuleCall_2; }
		
		//TimeoutVarRef
		public RuleCall getTimeoutVarRefParserRuleCall_3() { return cTimeoutVarRefParserRuleCall_3; }
	}
	public class TimeoutIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.TimeoutInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenTimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMsecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMsecINTTerminalRuleCall_1_0 = (RuleCall)cMsecAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateStateCrossReference_3_0 = (CrossReference)cTargetStateAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetStateStateCrossReference_3_0.eContents().get(1);
		
		//TimeoutInt:
		//	"whenTime" msec=INT "->" targetState=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//"whenTime" msec=INT "->" targetState=[State]
		public Group getGroup() { return cGroup; }
		
		//"whenTime"
		public Keyword getWhenTimeKeyword_0() { return cWhenTimeKeyword_0; }
		
		//msec=INT
		public Assignment getMsecAssignment_1() { return cMsecAssignment_1; }
		
		//INT
		public RuleCall getMsecINTTerminalRuleCall_1_0() { return cMsecINTTerminalRuleCall_1_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//targetState=[State]
		public Assignment getTargetStateAssignment_3() { return cTargetStateAssignment_3; }
		
		//[State]
		public CrossReference getTargetStateStateCrossReference_3_0() { return cTargetStateStateCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_3_0_1() { return cTargetStateStateIDTerminalRuleCall_3_0_1; }
	}
	public class TimeoutVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.TimeoutVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenTimeVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateStateCrossReference_3_0 = (CrossReference)cTargetStateAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetStateStateCrossReference_3_0.eContents().get(1);
		
		//TimeoutVar:
		//	"whenTimeVar" variable=Variable "->" targetState=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//"whenTimeVar" variable=Variable "->" targetState=[State]
		public Group getGroup() { return cGroup; }
		
		//"whenTimeVar"
		public Keyword getWhenTimeVarKeyword_0() { return cWhenTimeVarKeyword_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//targetState=[State]
		public Assignment getTargetStateAssignment_3() { return cTargetStateAssignment_3; }
		
		//[State]
		public CrossReference getTargetStateStateCrossReference_3_0() { return cTargetStateStateCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_3_0_1() { return cTargetStateStateIDTerminalRuleCall_3_0_1; }
	}
	public class TimeoutVarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.TimeoutVarRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenTimeVarRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefvarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefvarVarRefParserRuleCall_1_0 = (RuleCall)cRefvarAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateStateCrossReference_3_0 = (CrossReference)cTargetStateAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetStateStateCrossReference_3_0.eContents().get(1);
		
		//TimeoutVarRef:
		//	"whenTimeVarRef" refvar=VarRef "->" targetState=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//"whenTimeVarRef" refvar=VarRef "->" targetState=[State]
		public Group getGroup() { return cGroup; }
		
		//"whenTimeVarRef"
		public Keyword getWhenTimeVarRefKeyword_0() { return cWhenTimeVarRefKeyword_0; }
		
		//refvar=VarRef
		public Assignment getRefvarAssignment_1() { return cRefvarAssignment_1; }
		
		//VarRef
		public RuleCall getRefvarVarRefParserRuleCall_1_0() { return cRefvarVarRefParserRuleCall_1_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//targetState=[State]
		public Assignment getTargetStateAssignment_3() { return cTargetStateAssignment_3; }
		
		//[State]
		public CrossReference getTargetStateStateCrossReference_3_0() { return cTargetStateStateCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_3_0_1() { return cTargetStateStateIDTerminalRuleCall_3_0_1; }
	}
	public class TimeoutSolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.TimeoutSol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenTimeSolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefsoltimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefsoltimeVarSolRefParserRuleCall_1_0 = (RuleCall)cRefsoltimeAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateStateCrossReference_3_0 = (CrossReference)cTargetStateAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetStateStateCrossReference_3_0.eContents().get(1);
		
		//TimeoutSol:
		//	"whenTimeSol" refsoltime=VarSolRef "->" targetState=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//"whenTimeSol" refsoltime=VarSolRef "->" targetState=[State]
		public Group getGroup() { return cGroup; }
		
		//"whenTimeSol"
		public Keyword getWhenTimeSolKeyword_0() { return cWhenTimeSolKeyword_0; }
		
		//refsoltime=VarSolRef
		public Assignment getRefsoltimeAssignment_1() { return cRefsoltimeAssignment_1; }
		
		//VarSolRef
		public RuleCall getRefsoltimeVarSolRefParserRuleCall_1_0() { return cRefsoltimeVarSolRefParserRuleCall_1_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//targetState=[State]
		public Assignment getTargetStateAssignment_3() { return cTargetStateAssignment_3; }
		
		//[State]
		public CrossReference getTargetStateStateCrossReference_3_0() { return cTargetStateStateCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_3_0_1() { return cTargetStateStateIDTerminalRuleCall_3_0_1; }
	}
	public class InputTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.InputTransition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventTransSwitchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMsgTransSwitchParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRequestTransSwitchParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReplyTransSwitchParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//InputTransition:
		//	EventTransSwitch | MsgTransSwitch | RequestTransSwitch | ReplyTransSwitch;
		@Override public ParserRule getRule() { return rule; }
		
		//EventTransSwitch | MsgTransSwitch | RequestTransSwitch | ReplyTransSwitch
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EventTransSwitch
		public RuleCall getEventTransSwitchParserRuleCall_0() { return cEventTransSwitchParserRuleCall_0; }
		
		//MsgTransSwitch
		public RuleCall getMsgTransSwitchParserRuleCall_1() { return cMsgTransSwitchParserRuleCall_1; }
		
		//RequestTransSwitch
		public RuleCall getRequestTransSwitchParserRuleCall_2() { return cRequestTransSwitchParserRuleCall_2; }
		
		//ReplyTransSwitch
		public RuleCall getReplyTransSwitchParserRuleCall_3() { return cReplyTransSwitchParserRuleCall_3; }
	}
	public class EventTransSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.EventTransSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMessageEventCrossReference_1_0 = (CrossReference)cMessageAssignment_1.eContents().get(0);
		private final RuleCall cMessageEventIDTerminalRuleCall_1_0_1 = (RuleCall)cMessageEventCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardAnyActionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateStateCrossReference_4_0 = (CrossReference)cTargetStateAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetStateStateCrossReference_4_0.eContents().get(1);
		
		//EventTransSwitch:
		//	"whenEvent" message=[Event] ("and" guard=AnyAction)? "->" targetState=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//"whenEvent" message=[Event] ("and" guard=AnyAction)? "->" targetState=[State]
		public Group getGroup() { return cGroup; }
		
		//"whenEvent"
		public Keyword getWhenEventKeyword_0() { return cWhenEventKeyword_0; }
		
		//message=[Event]
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }
		
		//[Event]
		public CrossReference getMessageEventCrossReference_1_0() { return cMessageEventCrossReference_1_0; }
		
		//ID
		public RuleCall getMessageEventIDTerminalRuleCall_1_0_1() { return cMessageEventIDTerminalRuleCall_1_0_1; }
		
		//("and" guard=AnyAction)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"and"
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }
		
		//guard=AnyAction
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }
		
		//AnyAction
		public RuleCall getGuardAnyActionParserRuleCall_2_1_0() { return cGuardAnyActionParserRuleCall_2_1_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//targetState=[State]
		public Assignment getTargetStateAssignment_4() { return cTargetStateAssignment_4; }
		
		//[State]
		public CrossReference getTargetStateStateCrossReference_4_0() { return cTargetStateStateCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_4_0_1() { return cTargetStateStateIDTerminalRuleCall_4_0_1; }
	}
	public class MsgTransSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.MsgTransSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenMsgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMessageDispatchCrossReference_1_0 = (CrossReference)cMessageAssignment_1.eContents().get(0);
		private final RuleCall cMessageDispatchIDTerminalRuleCall_1_0_1 = (RuleCall)cMessageDispatchCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardAnyActionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateStateCrossReference_4_0 = (CrossReference)cTargetStateAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetStateStateCrossReference_4_0.eContents().get(1);
		
		//MsgTransSwitch:
		//	"whenMsg" message=[Dispatch] ("and" guard=AnyAction)? "->" targetState=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//"whenMsg" message=[Dispatch] ("and" guard=AnyAction)? "->" targetState=[State]
		public Group getGroup() { return cGroup; }
		
		//"whenMsg"
		public Keyword getWhenMsgKeyword_0() { return cWhenMsgKeyword_0; }
		
		//message=[Dispatch]
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }
		
		//[Dispatch]
		public CrossReference getMessageDispatchCrossReference_1_0() { return cMessageDispatchCrossReference_1_0; }
		
		//ID
		public RuleCall getMessageDispatchIDTerminalRuleCall_1_0_1() { return cMessageDispatchIDTerminalRuleCall_1_0_1; }
		
		//("and" guard=AnyAction)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"and"
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }
		
		//guard=AnyAction
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }
		
		//AnyAction
		public RuleCall getGuardAnyActionParserRuleCall_2_1_0() { return cGuardAnyActionParserRuleCall_2_1_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//targetState=[State]
		public Assignment getTargetStateAssignment_4() { return cTargetStateAssignment_4; }
		
		//[State]
		public CrossReference getTargetStateStateCrossReference_4_0() { return cTargetStateStateCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_4_0_1() { return cTargetStateStateIDTerminalRuleCall_4_0_1; }
	}
	public class RequestTransSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.RequestTransSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenRequestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMessageRequestCrossReference_1_0 = (CrossReference)cMessageAssignment_1.eContents().get(0);
		private final RuleCall cMessageRequestIDTerminalRuleCall_1_0_1 = (RuleCall)cMessageRequestCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardAnyActionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateStateCrossReference_4_0 = (CrossReference)cTargetStateAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetStateStateCrossReference_4_0.eContents().get(1);
		
		//RequestTransSwitch:
		//	"whenRequest" message=[Request] ("and" guard=AnyAction)? "->" targetState=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//"whenRequest" message=[Request] ("and" guard=AnyAction)? "->" targetState=[State]
		public Group getGroup() { return cGroup; }
		
		//"whenRequest"
		public Keyword getWhenRequestKeyword_0() { return cWhenRequestKeyword_0; }
		
		//message=[Request]
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }
		
		//[Request]
		public CrossReference getMessageRequestCrossReference_1_0() { return cMessageRequestCrossReference_1_0; }
		
		//ID
		public RuleCall getMessageRequestIDTerminalRuleCall_1_0_1() { return cMessageRequestIDTerminalRuleCall_1_0_1; }
		
		//("and" guard=AnyAction)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"and"
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }
		
		//guard=AnyAction
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }
		
		//AnyAction
		public RuleCall getGuardAnyActionParserRuleCall_2_1_0() { return cGuardAnyActionParserRuleCall_2_1_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//targetState=[State]
		public Assignment getTargetStateAssignment_4() { return cTargetStateAssignment_4; }
		
		//[State]
		public CrossReference getTargetStateStateCrossReference_4_0() { return cTargetStateStateCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_4_0_1() { return cTargetStateStateIDTerminalRuleCall_4_0_1; }
	}
	public class ReplyTransSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.ReplyTransSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenReplyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMessageReplyCrossReference_1_0 = (CrossReference)cMessageAssignment_1.eContents().get(0);
		private final RuleCall cMessageReplyIDTerminalRuleCall_1_0_1 = (RuleCall)cMessageReplyCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGuardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGuardAnyActionParserRuleCall_2_1_0 = (RuleCall)cGuardAssignment_2_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateStateCrossReference_4_0 = (CrossReference)cTargetStateAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetStateStateCrossReference_4_0.eContents().get(1);
		
		//ReplyTransSwitch:
		//	"whenReply" message=[Reply] ("and" guard=AnyAction)? "->" targetState=[State];
		@Override public ParserRule getRule() { return rule; }
		
		//"whenReply" message=[Reply] ("and" guard=AnyAction)? "->" targetState=[State]
		public Group getGroup() { return cGroup; }
		
		//"whenReply"
		public Keyword getWhenReplyKeyword_0() { return cWhenReplyKeyword_0; }
		
		//message=[Reply]
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }
		
		//[Reply]
		public CrossReference getMessageReplyCrossReference_1_0() { return cMessageReplyCrossReference_1_0; }
		
		//ID
		public RuleCall getMessageReplyIDTerminalRuleCall_1_0_1() { return cMessageReplyIDTerminalRuleCall_1_0_1; }
		
		//("and" guard=AnyAction)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"and"
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }
		
		//guard=AnyAction
		public Assignment getGuardAssignment_2_1() { return cGuardAssignment_2_1; }
		
		//AnyAction
		public RuleCall getGuardAnyActionParserRuleCall_2_1_0() { return cGuardAnyActionParserRuleCall_2_1_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//targetState=[State]
		public Assignment getTargetStateAssignment_4() { return cTargetStateAssignment_4; }
		
		//[State]
		public CrossReference getTargetStateStateCrossReference_4_0() { return cTargetStateStateCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_4_0_1() { return cTargetStateStateIDTerminalRuleCall_4_0_1; }
	}
	public class PHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.PHead");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPAtomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPStructParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPStructRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*
		// * PROLOG like
		// */ PHead:
		//	PAtom | PStruct | PStructRef;
		@Override public ParserRule getRule() { return rule; }
		
		//PAtom | PStruct | PStructRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PAtom
		public RuleCall getPAtomParserRuleCall_0() { return cPAtomParserRuleCall_0; }
		
		//PStruct
		public RuleCall getPStructParserRuleCall_1() { return cPStructParserRuleCall_1; }
		
		//PStructRef
		public RuleCall getPStructRefParserRuleCall_2() { return cPStructRefParserRuleCall_2; }
	}
	public class PAtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.PAtom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPAtomStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPAtomNumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPAtomicParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVarRefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVarSolRefParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cVarRefInStrParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//PAtom:
		//	PAtomString | Variable | PAtomNum | PAtomic | VarRef | VarSolRef | VarRefInStr;
		@Override public ParserRule getRule() { return rule; }
		
		//PAtomString | Variable | PAtomNum | PAtomic | VarRef | VarSolRef | VarRefInStr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PAtomString
		public RuleCall getPAtomStringParserRuleCall_0() { return cPAtomStringParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//PAtomNum
		public RuleCall getPAtomNumParserRuleCall_2() { return cPAtomNumParserRuleCall_2; }
		
		//PAtomic
		public RuleCall getPAtomicParserRuleCall_3() { return cPAtomicParserRuleCall_3; }
		
		//VarRef
		public RuleCall getVarRefParserRuleCall_4() { return cVarRefParserRuleCall_4; }
		
		//VarSolRef
		public RuleCall getVarSolRefParserRuleCall_5() { return cVarSolRefParserRuleCall_5; }
		
		//VarRefInStr
		public RuleCall getVarRefInStrParserRuleCall_6() { return cVarRefInStrParserRuleCall_6; }
	}
	public class PAtomStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.PAtomString");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//PAtomString:
		//	val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//val=STRING
		public Assignment getValAssignment() { return cValAssignment; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}
	public class PAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.PAtomic");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValIDTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//PAtomic:
		//	val=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//val=ID
		public Assignment getValAssignment() { return cValAssignment; }
		
		//ID
		public RuleCall getValIDTerminalRuleCall_0() { return cValIDTerminalRuleCall_0; }
	}
	public class PAtomNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.PAtomNum");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//PAtomNum:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class PStructRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.PStructRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructPStructParserRuleCall_1_0 = (RuleCall)cStructAssignment_1.eContents().get(0);
		
		//PStructRef:
		//	"$" struct=PStruct;
		@Override public ParserRule getRule() { return rule; }
		
		//"$" struct=PStruct
		public Group getGroup() { return cGroup; }
		
		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//struct=PStruct
		public Assignment getStructAssignment_1() { return cStructAssignment_1; }
		
		//PStruct
		public RuleCall getStructPStructParserRuleCall_1_0() { return cStructPStructParserRuleCall_1_0; }
	}
	public class PStructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.PStruct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctorIDTerminalRuleCall_0_0 = (RuleCall)cFunctorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMsgArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMsgArgPHeadParserRuleCall_2_0 = (RuleCall)cMsgArgAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMsgArgAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMsgArgPHeadParserRuleCall_3_1_0 = (RuleCall)cMsgArgAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////
		//PStruct:
		//	functor=ID "(" msgArg+=PHead ("," msgArg+=PHead)* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//functor=ID "(" msgArg+=PHead ("," msgArg+=PHead)* ")"
		public Group getGroup() { return cGroup; }
		
		//functor=ID
		public Assignment getFunctorAssignment_0() { return cFunctorAssignment_0; }
		
		//ID
		public RuleCall getFunctorIDTerminalRuleCall_0_0() { return cFunctorIDTerminalRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//msgArg+=PHead
		public Assignment getMsgArgAssignment_2() { return cMsgArgAssignment_2; }
		
		//PHead
		public RuleCall getMsgArgPHeadParserRuleCall_2_0() { return cMsgArgPHeadParserRuleCall_2_0; }
		
		//("," msgArg+=PHead)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//msgArg+=PHead
		public Assignment getMsgArgAssignment_3_1() { return cMsgArgAssignment_3_1; }
		
		//PHead
		public RuleCall getMsgArgPHeadParserRuleCall_3_1_0() { return cMsgArgPHeadParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameVARIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		
		////At least one arg is required
		//Variable:
		//	{Variable} varName=VARID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} varName=VARID
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//varName=VARID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//VARID
		public RuleCall getVarNameVARIDTerminalRuleCall_1_0() { return cVarNameVARIDTerminalRuleCall_1_0; }
	}
	public class VarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.VarRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameVARIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		
		////USING vars (from solve or from code)
		//VarRef:
		//	"$" varName=VARID;
		@Override public ParserRule getRule() { return rule; }
		
		//"$" varName=VARID
		public Group getGroup() { return cGroup; }
		
		//"$"
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//varName=VARID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//VARID
		public RuleCall getVarNameVARIDTerminalRuleCall_1_0() { return cVarNameVARIDTerminalRuleCall_1_0; }
	}
	public class VarRefInStrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.VarRefInStr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameVARIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		
		////in msg payload  e.g. modelChange(robot,$Curmove) => $Curmove
		//VarRefInStr:
		//	"#" varName=VARID;
		@Override public ParserRule getRule() { return rule; }
		
		//"#" varName=VARID
		public Group getGroup() { return cGroup; }
		
		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//varName=VARID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//VARID
		public RuleCall getVarNameVARIDTerminalRuleCall_1_0() { return cVarNameVARIDTerminalRuleCall_1_0; }
	}
	public class VarSolRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.VarSolRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameVARIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		
		////in msg payload. e.g. modelChange(robot,#M)       => ${getCurSol("M").toString()}
		//VarSolRef:
		//	"@" varName=VARID;
		@Override public ParserRule getRule() { return rule; }
		
		//"@" varName=VARID
		public Group getGroup() { return cGroup; }
		
		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//varName=VARID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//VARID
		public RuleCall getVarNameVARIDTerminalRuleCall_1_0() { return cVarNameVARIDTerminalRuleCall_1_0; }
	}
	
	
	private final QActorSystemElements pQActorSystem;
	private final TerminalRule tVARID;
	private final TerminalRule tKCODE;
	private final QualifiedNameElements pQualifiedName;
	private final QActorSystemSpecElements pQActorSystemSpec;
	private final BrokerSpecElements pBrokerSpec;
	private final MessageElements pMessage;
	private final OutOnlyMessageElements pOutOnlyMessage;
	private final OutInMessageElements pOutInMessage;
	private final EventElements pEvent;
	private final SignalElements pSignal;
	private final TokenElements pToken;
	private final DispatchElements pDispatch;
	private final RequestElements pRequest;
	private final ReplyElements pReply;
	private final InvitationElements pInvitation;
	private final ContextElements pContext;
	private final ComponentIPElements pComponentIP;
	private final QActorDeclarationElements pQActorDeclaration;
	private final QActorExternalElements pQActorExternal;
	private final QActorCodedElements pQActorCoded;
	private final QActorElements pQActor;
	private final StateElements pState;
	private final StateActionElements pStateAction;
	private final IfSolvedActionElements pIfSolvedAction;
	private final GuardedStateActionElements pGuardedStateAction;
	private final PrintCurMsgElements pPrintCurMsg;
	private final PrintElements pPrint;
	private final SolveGoalElements pSolveGoal;
	private final DiscardMsgElements pDiscardMsg;
	private final MemoTimeElements pMemoTime;
	private final DurationElements pDuration;
	private final ForwardElements pForward;
	private final EmitElements pEmit;
	private final DemandElements pDemand;
	private final AnswerElements pAnswer;
	private final ReplyReqElements pReplyReq;
	private final DelayElements pDelay;
	private final DelayIntElements pDelayInt;
	private final DelayVarElements pDelayVar;
	private final DelayVrefElements pDelayVref;
	private final DelaySolElements pDelaySol;
	private final MsgCondElements pMsgCond;
	private final EndActorElements pEndActor;
	private final UpdateResourceElements pUpdateResource;
	private final NoMsgCondElements pNoMsgCond;
	private final AnyActionElements pAnyAction;
	private final CodeRunElements pCodeRun;
	private final CodeRunActorElements pCodeRunActor;
	private final CodeRunSimpleElements pCodeRunSimple;
	private final ExecElements pExec;
	private final TransitionElements pTransition;
	private final EmptyTransitionElements pEmptyTransition;
	private final NonEmptyTransitionElements pNonEmptyTransition;
	private final TimeoutElements pTimeout;
	private final TimeoutIntElements pTimeoutInt;
	private final TimeoutVarElements pTimeoutVar;
	private final TimeoutVarRefElements pTimeoutVarRef;
	private final TimeoutSolElements pTimeoutSol;
	private final InputTransitionElements pInputTransition;
	private final EventTransSwitchElements pEventTransSwitch;
	private final MsgTransSwitchElements pMsgTransSwitch;
	private final RequestTransSwitchElements pRequestTransSwitch;
	private final ReplyTransSwitchElements pReplyTransSwitch;
	private final PHeadElements pPHead;
	private final PAtomElements pPAtom;
	private final PAtomStringElements pPAtomString;
	private final PAtomicElements pPAtomic;
	private final PAtomNumElements pPAtomNum;
	private final PStructRefElements pPStructRef;
	private final PStructElements pPStruct;
	private final VariableElements pVariable;
	private final VarRefElements pVarRef;
	private final VarRefInStrElements pVarRefInStr;
	private final VarSolRefElements pVarSolRef;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QactorkGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pQActorSystem = new QActorSystemElements();
		this.tVARID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.VARID");
		this.tKCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unibo.Qactork.KCODE");
		this.pQualifiedName = new QualifiedNameElements();
		this.pQActorSystemSpec = new QActorSystemSpecElements();
		this.pBrokerSpec = new BrokerSpecElements();
		this.pMessage = new MessageElements();
		this.pOutOnlyMessage = new OutOnlyMessageElements();
		this.pOutInMessage = new OutInMessageElements();
		this.pEvent = new EventElements();
		this.pSignal = new SignalElements();
		this.pToken = new TokenElements();
		this.pDispatch = new DispatchElements();
		this.pRequest = new RequestElements();
		this.pReply = new ReplyElements();
		this.pInvitation = new InvitationElements();
		this.pContext = new ContextElements();
		this.pComponentIP = new ComponentIPElements();
		this.pQActorDeclaration = new QActorDeclarationElements();
		this.pQActorExternal = new QActorExternalElements();
		this.pQActorCoded = new QActorCodedElements();
		this.pQActor = new QActorElements();
		this.pState = new StateElements();
		this.pStateAction = new StateActionElements();
		this.pIfSolvedAction = new IfSolvedActionElements();
		this.pGuardedStateAction = new GuardedStateActionElements();
		this.pPrintCurMsg = new PrintCurMsgElements();
		this.pPrint = new PrintElements();
		this.pSolveGoal = new SolveGoalElements();
		this.pDiscardMsg = new DiscardMsgElements();
		this.pMemoTime = new MemoTimeElements();
		this.pDuration = new DurationElements();
		this.pForward = new ForwardElements();
		this.pEmit = new EmitElements();
		this.pDemand = new DemandElements();
		this.pAnswer = new AnswerElements();
		this.pReplyReq = new ReplyReqElements();
		this.pDelay = new DelayElements();
		this.pDelayInt = new DelayIntElements();
		this.pDelayVar = new DelayVarElements();
		this.pDelayVref = new DelayVrefElements();
		this.pDelaySol = new DelaySolElements();
		this.pMsgCond = new MsgCondElements();
		this.pEndActor = new EndActorElements();
		this.pUpdateResource = new UpdateResourceElements();
		this.pNoMsgCond = new NoMsgCondElements();
		this.pAnyAction = new AnyActionElements();
		this.pCodeRun = new CodeRunElements();
		this.pCodeRunActor = new CodeRunActorElements();
		this.pCodeRunSimple = new CodeRunSimpleElements();
		this.pExec = new ExecElements();
		this.pTransition = new TransitionElements();
		this.pEmptyTransition = new EmptyTransitionElements();
		this.pNonEmptyTransition = new NonEmptyTransitionElements();
		this.pTimeout = new TimeoutElements();
		this.pTimeoutInt = new TimeoutIntElements();
		this.pTimeoutVar = new TimeoutVarElements();
		this.pTimeoutVarRef = new TimeoutVarRefElements();
		this.pTimeoutSol = new TimeoutSolElements();
		this.pInputTransition = new InputTransitionElements();
		this.pEventTransSwitch = new EventTransSwitchElements();
		this.pMsgTransSwitch = new MsgTransSwitchElements();
		this.pRequestTransSwitch = new RequestTransSwitchElements();
		this.pReplyTransSwitch = new ReplyTransSwitchElements();
		this.pPHead = new PHeadElements();
		this.pPAtom = new PAtomElements();
		this.pPAtomString = new PAtomStringElements();
		this.pPAtomic = new PAtomicElements();
		this.pPAtomNum = new PAtomNumElements();
		this.pPStructRef = new PStructRefElements();
		this.pPStruct = new PStructElements();
		this.pVariable = new VariableElements();
		this.pVarRef = new VarRefElements();
		this.pVarRefInStr = new VarRefInStrElements();
		this.pVarSolRef = new VarSolRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.unibo.Qactork".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//QActorSystem:
	//	"System" trace?="-trace"? logmsg?="-msglog"? spec=QActorSystemSpec;
	public QActorSystemElements getQActorSystemAccess() {
		return pQActorSystem;
	}
	
	public ParserRule getQActorSystemRule() {
		return getQActorSystemAccess().getRule();
	}
	
	//terminal VARID:
	//	('A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getVARIDRule() {
		return tVARID;
	}
	
	//terminal KCODE:
	//	'#' .* '#';
	public TerminalRule getKCODERule() {
		return tKCODE;
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QActorSystemSpec:
	//	name=ID
	//	mqttBroker=BrokerSpec?
	//	message+=Message*
	//	context+=Context*
	//	actor+=QActorDeclaration*;
	public QActorSystemSpecElements getQActorSystemSpecAccess() {
		return pQActorSystemSpec;
	}
	
	public ParserRule getQActorSystemSpecRule() {
		return getQActorSystemSpecAccess().getRule();
	}
	
	//BrokerSpec:
	//	"mqttBroker" brokerHost=STRING ":" brokerPort=INT "eventTopic" eventtopic=STRING;
	public BrokerSpecElements getBrokerSpecAccess() {
		return pBrokerSpec;
	}
	
	public ParserRule getBrokerSpecRule() {
		return getBrokerSpecAccess().getRule();
	}
	
	///*
	// * ------------------------------------------
	// * MESSAGE
	//* ------------------------------------------
	// */ Message:
	//	OutOnlyMessage | OutInMessage;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//OutOnlyMessage:
	//	Dispatch | Event | Signal | Token;
	public OutOnlyMessageElements getOutOnlyMessageAccess() {
		return pOutOnlyMessage;
	}
	
	public ParserRule getOutOnlyMessageRule() {
		return getOutOnlyMessageAccess().getRule();
	}
	
	//OutInMessage:
	//	Request | Reply | Invitation;
	public OutInMessageElements getOutInMessageAccess() {
		return pOutInMessage;
	}
	
	public ParserRule getOutInMessageRule() {
		return getOutInMessageAccess().getRule();
	}
	
	//Event:
	//	"Event" name=ID ":" msg=PHead;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Signal:
	//	"Signal" name=ID ":" msg=PHead;
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//Token:
	//	"Token" name=ID ":" msg=PHead;
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}
	
	//Dispatch:
	//	"Dispatch" name=ID ":" msg=PHead;
	public DispatchElements getDispatchAccess() {
		return pDispatch;
	}
	
	public ParserRule getDispatchRule() {
		return getDispatchAccess().getRule();
	}
	
	//Request:
	//	"Request" name=ID ":" msg=PHead;
	public RequestElements getRequestAccess() {
		return pRequest;
	}
	
	public ParserRule getRequestRule() {
		return getRequestAccess().getRule();
	}
	
	//Reply:
	//	"Reply" name=ID ":" msg=PHead;
	public ReplyElements getReplyAccess() {
		return pReply;
	}
	
	public ParserRule getReplyRule() {
		return getReplyAccess().getRule();
	}
	
	//Invitation:
	//	"Invitation" name=ID ":" msg=PHead;
	public InvitationElements getInvitationAccess() {
		return pInvitation;
	}
	
	public ParserRule getInvitationRule() {
		return getInvitationAccess().getRule();
	}
	
	///* 
	// * Context
	// */ Context:
	//	"Context" name=ID "ip" ip=ComponentIP mqtt?="+mqtt"?;
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//ComponentIP:
	//	{ComponentIP} "[" "host=" host=STRING "port=" port=INT "]";
	public ComponentIPElements getComponentIPAccess() {
		return pComponentIP;
	}
	
	public ParserRule getComponentIPRule() {
		return getComponentIPAccess().getRule();
	}
	
	///* 
	// * QActor
	// */ QActorDeclaration:
	//	QActor | QActorCoded | QActorExternal;
	public QActorDeclarationElements getQActorDeclarationAccess() {
		return pQActorDeclaration;
	}
	
	public ParserRule getQActorDeclarationRule() {
		return getQActorDeclarationAccess().getRule();
	}
	
	//QActorExternal:
	//	"ExternalQActor" name=ID "context" context=[Context];
	public QActorExternalElements getQActorExternalAccess() {
		return pQActorExternal;
	}
	
	public ParserRule getQActorExternalRule() {
		return getQActorExternalAccess().getRule();
	}
	
	//QActorCoded:
	//	"CodedQActor" name=ID "context" context=[Context] "className" className=STRING;
	public QActorCodedElements getQActorCodedAccess() {
		return pQActorCoded;
	}
	
	public ParserRule getQActorCodedRule() {
		return getQActorCodedAccess().getRule();
	}
	
	//QActor:
	//	"QActor" name=ID "context" context=[Context]
	//	"{"
	//	start=AnyAction?
	//	states+=State*
	//	"}";
	public QActorElements getQActorAccess() {
		return pQActor;
	}
	
	public ParserRule getQActorRule() {
		return getQActorAccess().getRule();
	}
	
	///*
	// * State
	// */ State:
	//	"State" name=ID normal?="initial"?
	//	//actionseq = ActionSequence
	//	"{" actions+=StateAction* "}"
	//	transition=Transition?;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	///*
	// * StateAction
	// */ StateAction:
	//	GuardedStateAction | IfSolvedAction | Print | PrintCurMsg | SolveGoal | DiscardMsg | MemoTime | Duration | Forward |
	//	Emit | Demand | Answer | ReplyReq | Delay | MsgCond | EndActor | UpdateResource | CodeRun | AnyAction | Exec //extra code
	//;
	public StateActionElements getStateActionAccess() {
		return pStateAction;
	}
	
	public ParserRule getStateActionRule() {
		return getStateActionAccess().getRule();
	}
	
	//IfSolvedAction:
	//	{IfSolvedAction} "ifSolved" "{" solvedactions+=StateAction* "}" ("else" "{" notsolvedactions+=StateAction* "}")?;
	public IfSolvedActionElements getIfSolvedActionAccess() {
		return pIfSolvedAction;
	}
	
	public ParserRule getIfSolvedActionRule() {
		return getIfSolvedActionAccess().getRule();
	}
	
	//GuardedStateAction:
	//	{GuardedStateAction} "if" guard=AnyAction "{" okactions+=StateAction* "}" ("else" "{" koactions+=StateAction* "}")?;
	public GuardedStateActionElements getGuardedStateActionAccess() {
		return pGuardedStateAction;
	}
	
	public ParserRule getGuardedStateActionRule() {
		return getGuardedStateActionAccess().getRule();
	}
	
	//PrintCurMsg:
	//	{PrintCurMsg} "printCurrentMessage";
	public PrintCurMsgElements getPrintCurMsgAccess() {
		return pPrintCurMsg;
	}
	
	public ParserRule getPrintCurMsgRule() {
		return getPrintCurMsgAccess().getRule();
	}
	
	//Print:
	//	{Print} "println" "(" args=PHead ")";
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//SolveGoal:
	//	{SolveGoal} "solve" "(" goal=PHead ("," resVar=Variable)? ")";
	public SolveGoalElements getSolveGoalAccess() {
		return pSolveGoal;
	}
	
	public ParserRule getSolveGoalRule() {
		return getSolveGoalAccess().getRule();
	}
	
	//DiscardMsg:
	//	{DiscardMsg} "discardMsg" (discard?='On' | 'Off');
	public DiscardMsgElements getDiscardMsgAccess() {
		return pDiscardMsg;
	}
	
	public ParserRule getDiscardMsgRule() {
		return getDiscardMsgAccess().getRule();
	}
	
	//MemoTime:
	//	{MemoTime} "memoCurrentTime" store=VARID;
	public MemoTimeElements getMemoTimeAccess() {
		return pMemoTime;
	}
	
	public ParserRule getMemoTimeRule() {
		return getMemoTimeAccess().getRule();
	}
	
	//Duration:
	//	{Duration} "setDuration" store=VARID "from" start=VARID;
	public DurationElements getDurationAccess() {
		return pDuration;
	}
	
	public ParserRule getDurationRule() {
		return getDurationAccess().getRule();
	}
	
	//Forward:
	//	"forward" dest=[QActorDeclaration] "-m" msgref=[Dispatch] ":" val=PHead;
	public ForwardElements getForwardAccess() {
		return pForward;
	}
	
	public ParserRule getForwardRule() {
		return getForwardAccess().getRule();
	}
	
	//Emit:
	//	"emit" msgref=[Event] ":" val=PHead;
	public EmitElements getEmitAccess() {
		return pEmit;
	}
	
	public ParserRule getEmitRule() {
		return getEmitAccess().getRule();
	}
	
	//Demand:
	//	"request" dest=[QActorDeclaration] "-m" msgref=[Request] ":" val=PHead;
	public DemandElements getDemandAccess() {
		return pDemand;
	}
	
	public ParserRule getDemandRule() {
		return getDemandAccess().getRule();
	}
	
	//Answer:
	//	"replyTo" reqref=[Request] "with" msgref=[Reply] ":" val=PHead;
	public AnswerElements getAnswerAccess() {
		return pAnswer;
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}
	
	//ReplyReq:
	//	"askFor" reqref=[Request] "request" msgref=[Request] ":" val=PHead;
	public ReplyReqElements getReplyReqAccess() {
		return pReplyReq;
	}
	
	public ParserRule getReplyReqRule() {
		return getReplyReqAccess().getRule();
	}
	
	//Delay:
	//	DelayInt | DelayVar | DelayVref | DelaySol;
	public DelayElements getDelayAccess() {
		return pDelay;
	}
	
	public ParserRule getDelayRule() {
		return getDelayAccess().getRule();
	}
	
	//DelayInt:
	//	"delay" time=INT;
	public DelayIntElements getDelayIntAccess() {
		return pDelayInt;
	}
	
	public ParserRule getDelayIntRule() {
		return getDelayIntAccess().getRule();
	}
	
	//DelayVar:
	//	"delayVar" refvar=Variable;
	public DelayVarElements getDelayVarAccess() {
		return pDelayVar;
	}
	
	public ParserRule getDelayVarRule() {
		return getDelayVarAccess().getRule();
	}
	
	//DelayVref:
	//	"delayVarRef" reftime=VarRef;
	public DelayVrefElements getDelayVrefAccess() {
		return pDelayVref;
	}
	
	public ParserRule getDelayVrefRule() {
		return getDelayVrefAccess().getRule();
	}
	
	//DelaySol:
	//	"delaySol" refsoltime=VarSolRef;
	public DelaySolElements getDelaySolAccess() {
		return pDelaySol;
	}
	
	public ParserRule getDelaySolRule() {
		return getDelaySolAccess().getRule();
	}
	
	//MsgCond:
	//	"onMsg" "(" message=[Message] ":" msg=PHead ")" "{" condactions+=StateAction* "}" ("else" ifnot=NoMsgCond)?;
	public MsgCondElements getMsgCondAccess() {
		return pMsgCond;
	}
	
	public ParserRule getMsgCondRule() {
		return getMsgCondAccess().getRule();
	}
	
	//EndActor:
	//	"terminate" arg=INT;
	public EndActorElements getEndActorAccess() {
		return pEndActor;
	}
	
	public ParserRule getEndActorRule() {
		return getEndActorAccess().getRule();
	}
	
	//UpdateResource:
	//	{UpdateResource} "updateResource" val=AnyAction;
	public UpdateResourceElements getUpdateResourceAccess() {
		return pUpdateResource;
	}
	
	public ParserRule getUpdateResourceRule() {
		return getUpdateResourceAccess().getRule();
	}
	
	//NoMsgCond:
	//	{NoMsgCond} "{" notcondactions+=StateAction* "}";
	public NoMsgCondElements getNoMsgCondAccess() {
		return pNoMsgCond;
	}
	
	public ParserRule getNoMsgCondRule() {
		return getNoMsgCondAccess().getRule();
	}
	
	//AnyAction:
	//	{AnyAction} "[" body=KCODE "]";
	public AnyActionElements getAnyActionAccess() {
		return pAnyAction;
	}
	
	public ParserRule getAnyActionRule() {
		return getAnyActionAccess().getRule();
	}
	
	////"[" body=STRING "]"; 
	//CodeRun:
	//	CodeRunActor | CodeRunSimple;
	public CodeRunElements getCodeRunAccess() {
		return pCodeRun;
	}
	
	public ParserRule getCodeRunRule() {
		return getCodeRunAccess().getRule();
	}
	
	//CodeRunActor:
	//	"qrun" aitem=QualifiedName "(" "myself" ("," args+=PHead ("," args+=PHead)*)? ")";
	public CodeRunActorElements getCodeRunActorAccess() {
		return pCodeRunActor;
	}
	
	public ParserRule getCodeRunActorRule() {
		return getCodeRunActorAccess().getRule();
	}
	
	//CodeRunSimple:
	//	"run" bitem=QualifiedName "(" (args+=PHead ("," args+=PHead)*)? ")";
	public CodeRunSimpleElements getCodeRunSimpleAccess() {
		return pCodeRunSimple;
	}
	
	public ParserRule getCodeRunSimpleRule() {
		return getCodeRunSimpleAccess().getRule();
	}
	
	//Exec:
	//	"machineExec" action=STRING;
	public ExecElements getExecAccess() {
		return pExec;
	}
	
	public ParserRule getExecRule() {
		return getExecAccess().getRule();
	}
	
	///*
	// * Transition
	// */ Transition:
	//	EmptyTransition | NonEmptyTransition;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//EmptyTransition:
	//	"Goto" targetState=[State] ("if" eguard=AnyAction "else" othertargetState=[State])?;
	public EmptyTransitionElements getEmptyTransitionAccess() {
		return pEmptyTransition;
	}
	
	public ParserRule getEmptyTransitionRule() {
		return getEmptyTransitionAccess().getRule();
	}
	
	//NonEmptyTransition:
	//	"Transition" name=ID duration=Timeout? trans+=InputTransition* ("else" elseempty=EmptyTransition)?;
	public NonEmptyTransitionElements getNonEmptyTransitionAccess() {
		return pNonEmptyTransition;
	}
	
	public ParserRule getNonEmptyTransitionRule() {
		return getNonEmptyTransitionAccess().getRule();
	}
	
	//Timeout:
	//	TimeoutInt | TimeoutVar | TimeoutSol | TimeoutVarRef;
	public TimeoutElements getTimeoutAccess() {
		return pTimeout;
	}
	
	public ParserRule getTimeoutRule() {
		return getTimeoutAccess().getRule();
	}
	
	//TimeoutInt:
	//	"whenTime" msec=INT "->" targetState=[State];
	public TimeoutIntElements getTimeoutIntAccess() {
		return pTimeoutInt;
	}
	
	public ParserRule getTimeoutIntRule() {
		return getTimeoutIntAccess().getRule();
	}
	
	//TimeoutVar:
	//	"whenTimeVar" variable=Variable "->" targetState=[State];
	public TimeoutVarElements getTimeoutVarAccess() {
		return pTimeoutVar;
	}
	
	public ParserRule getTimeoutVarRule() {
		return getTimeoutVarAccess().getRule();
	}
	
	//TimeoutVarRef:
	//	"whenTimeVarRef" refvar=VarRef "->" targetState=[State];
	public TimeoutVarRefElements getTimeoutVarRefAccess() {
		return pTimeoutVarRef;
	}
	
	public ParserRule getTimeoutVarRefRule() {
		return getTimeoutVarRefAccess().getRule();
	}
	
	//TimeoutSol:
	//	"whenTimeSol" refsoltime=VarSolRef "->" targetState=[State];
	public TimeoutSolElements getTimeoutSolAccess() {
		return pTimeoutSol;
	}
	
	public ParserRule getTimeoutSolRule() {
		return getTimeoutSolAccess().getRule();
	}
	
	//InputTransition:
	//	EventTransSwitch | MsgTransSwitch | RequestTransSwitch | ReplyTransSwitch;
	public InputTransitionElements getInputTransitionAccess() {
		return pInputTransition;
	}
	
	public ParserRule getInputTransitionRule() {
		return getInputTransitionAccess().getRule();
	}
	
	//EventTransSwitch:
	//	"whenEvent" message=[Event] ("and" guard=AnyAction)? "->" targetState=[State];
	public EventTransSwitchElements getEventTransSwitchAccess() {
		return pEventTransSwitch;
	}
	
	public ParserRule getEventTransSwitchRule() {
		return getEventTransSwitchAccess().getRule();
	}
	
	//MsgTransSwitch:
	//	"whenMsg" message=[Dispatch] ("and" guard=AnyAction)? "->" targetState=[State];
	public MsgTransSwitchElements getMsgTransSwitchAccess() {
		return pMsgTransSwitch;
	}
	
	public ParserRule getMsgTransSwitchRule() {
		return getMsgTransSwitchAccess().getRule();
	}
	
	//RequestTransSwitch:
	//	"whenRequest" message=[Request] ("and" guard=AnyAction)? "->" targetState=[State];
	public RequestTransSwitchElements getRequestTransSwitchAccess() {
		return pRequestTransSwitch;
	}
	
	public ParserRule getRequestTransSwitchRule() {
		return getRequestTransSwitchAccess().getRule();
	}
	
	//ReplyTransSwitch:
	//	"whenReply" message=[Reply] ("and" guard=AnyAction)? "->" targetState=[State];
	public ReplyTransSwitchElements getReplyTransSwitchAccess() {
		return pReplyTransSwitch;
	}
	
	public ParserRule getReplyTransSwitchRule() {
		return getReplyTransSwitchAccess().getRule();
	}
	
	///*
	// * PROLOG like
	// */ PHead:
	//	PAtom | PStruct | PStructRef;
	public PHeadElements getPHeadAccess() {
		return pPHead;
	}
	
	public ParserRule getPHeadRule() {
		return getPHeadAccess().getRule();
	}
	
	//PAtom:
	//	PAtomString | Variable | PAtomNum | PAtomic | VarRef | VarSolRef | VarRefInStr;
	public PAtomElements getPAtomAccess() {
		return pPAtom;
	}
	
	public ParserRule getPAtomRule() {
		return getPAtomAccess().getRule();
	}
	
	//PAtomString:
	//	val=STRING;
	public PAtomStringElements getPAtomStringAccess() {
		return pPAtomString;
	}
	
	public ParserRule getPAtomStringRule() {
		return getPAtomStringAccess().getRule();
	}
	
	//PAtomic:
	//	val=ID;
	public PAtomicElements getPAtomicAccess() {
		return pPAtomic;
	}
	
	public ParserRule getPAtomicRule() {
		return getPAtomicAccess().getRule();
	}
	
	//PAtomNum:
	//	val=INT;
	public PAtomNumElements getPAtomNumAccess() {
		return pPAtomNum;
	}
	
	public ParserRule getPAtomNumRule() {
		return getPAtomNumAccess().getRule();
	}
	
	//PStructRef:
	//	"$" struct=PStruct;
	public PStructRefElements getPStructRefAccess() {
		return pPStructRef;
	}
	
	public ParserRule getPStructRefRule() {
		return getPStructRefAccess().getRule();
	}
	
	////
	//PStruct:
	//	functor=ID "(" msgArg+=PHead ("," msgArg+=PHead)* ")";
	public PStructElements getPStructAccess() {
		return pPStruct;
	}
	
	public ParserRule getPStructRule() {
		return getPStructAccess().getRule();
	}
	
	////At least one arg is required
	//Variable:
	//	{Variable} varName=VARID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	////USING vars (from solve or from code)
	//VarRef:
	//	"$" varName=VARID;
	public VarRefElements getVarRefAccess() {
		return pVarRef;
	}
	
	public ParserRule getVarRefRule() {
		return getVarRefAccess().getRule();
	}
	
	////in msg payload  e.g. modelChange(robot,$Curmove) => $Curmove
	//VarRefInStr:
	//	"#" varName=VARID;
	public VarRefInStrElements getVarRefInStrAccess() {
		return pVarRefInStr;
	}
	
	public ParserRule getVarRefInStrRule() {
		return getVarRefInStrAccess().getRule();
	}
	
	////in msg payload. e.g. modelChange(robot,#M)       => ${getCurSol("M").toString()}
	//VarSolRef:
	//	"@" varName=VARID;
	public VarSolRefElements getVarSolRefAccess() {
		return pVarSolRef;
	}
	
	public ParserRule getVarSolRefRule() {
		return getVarSolRefAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
