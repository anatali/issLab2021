/*
 * generated by Xtext 2.22.0
 */
package it.unibo.serializer;

import com.google.inject.Inject;
import it.unibo.qactork.Answer;
import it.unibo.qactork.AnyAction;
import it.unibo.qactork.BrokerSpec;
import it.unibo.qactork.CodeRunActor;
import it.unibo.qactork.CodeRunSimple;
import it.unibo.qactork.ComponentIP;
import it.unibo.qactork.Context;
import it.unibo.qactork.DelayInt;
import it.unibo.qactork.DelaySol;
import it.unibo.qactork.DelayVar;
import it.unibo.qactork.DelayVref;
import it.unibo.qactork.Demand;
import it.unibo.qactork.DiscardMsg;
import it.unibo.qactork.Dispatch;
import it.unibo.qactork.Duration;
import it.unibo.qactork.Emit;
import it.unibo.qactork.EmptyTransition;
import it.unibo.qactork.EndActor;
import it.unibo.qactork.Event;
import it.unibo.qactork.EventTransSwitch;
import it.unibo.qactork.Exec;
import it.unibo.qactork.Forward;
import it.unibo.qactork.GuardedStateAction;
import it.unibo.qactork.IfSolvedAction;
import it.unibo.qactork.Invitation;
import it.unibo.qactork.MemoTime;
import it.unibo.qactork.MsgCond;
import it.unibo.qactork.MsgTransSwitch;
import it.unibo.qactork.NoMsgCond;
import it.unibo.qactork.NonEmptyTransition;
import it.unibo.qactork.PAtomNum;
import it.unibo.qactork.PAtomString;
import it.unibo.qactork.PAtomic;
import it.unibo.qactork.PStruct;
import it.unibo.qactork.PStructRef;
import it.unibo.qactork.Print;
import it.unibo.qactork.PrintCurMsg;
import it.unibo.qactork.QActor;
import it.unibo.qactork.QActorCoded;
import it.unibo.qactork.QActorExternal;
import it.unibo.qactork.QActorSystem;
import it.unibo.qactork.QActorSystemSpec;
import it.unibo.qactork.QactorkPackage;
import it.unibo.qactork.Reply;
import it.unibo.qactork.ReplyReq;
import it.unibo.qactork.ReplyTransSwitch;
import it.unibo.qactork.Request;
import it.unibo.qactork.RequestTransSwitch;
import it.unibo.qactork.Signal;
import it.unibo.qactork.SolveGoal;
import it.unibo.qactork.State;
import it.unibo.qactork.TimeoutInt;
import it.unibo.qactork.TimeoutSol;
import it.unibo.qactork.TimeoutVar;
import it.unibo.qactork.TimeoutVarRef;
import it.unibo.qactork.Token;
import it.unibo.qactork.UpdateResource;
import it.unibo.qactork.VarRef;
import it.unibo.qactork.VarRefInStr;
import it.unibo.qactork.VarSolRef;
import it.unibo.qactork.Variable;
import it.unibo.services.QactorkGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class QactorkSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QactorkGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QactorkPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QactorkPackage.ANSWER:
				sequence_Answer(context, (Answer) semanticObject); 
				return; 
			case QactorkPackage.ANY_ACTION:
				sequence_AnyAction(context, (AnyAction) semanticObject); 
				return; 
			case QactorkPackage.BROKER_SPEC:
				sequence_BrokerSpec(context, (BrokerSpec) semanticObject); 
				return; 
			case QactorkPackage.CODE_RUN_ACTOR:
				sequence_CodeRunActor(context, (CodeRunActor) semanticObject); 
				return; 
			case QactorkPackage.CODE_RUN_SIMPLE:
				sequence_CodeRunSimple(context, (CodeRunSimple) semanticObject); 
				return; 
			case QactorkPackage.COMPONENT_IP:
				sequence_ComponentIP(context, (ComponentIP) semanticObject); 
				return; 
			case QactorkPackage.CONTEXT:
				sequence_Context(context, (Context) semanticObject); 
				return; 
			case QactorkPackage.DELAY_INT:
				sequence_DelayInt(context, (DelayInt) semanticObject); 
				return; 
			case QactorkPackage.DELAY_SOL:
				sequence_DelaySol(context, (DelaySol) semanticObject); 
				return; 
			case QactorkPackage.DELAY_VAR:
				sequence_DelayVar(context, (DelayVar) semanticObject); 
				return; 
			case QactorkPackage.DELAY_VREF:
				sequence_DelayVref(context, (DelayVref) semanticObject); 
				return; 
			case QactorkPackage.DEMAND:
				sequence_Demand(context, (Demand) semanticObject); 
				return; 
			case QactorkPackage.DISCARD_MSG:
				sequence_DiscardMsg(context, (DiscardMsg) semanticObject); 
				return; 
			case QactorkPackage.DISPATCH:
				sequence_Dispatch(context, (Dispatch) semanticObject); 
				return; 
			case QactorkPackage.DURATION:
				sequence_Duration(context, (Duration) semanticObject); 
				return; 
			case QactorkPackage.EMIT:
				sequence_Emit(context, (Emit) semanticObject); 
				return; 
			case QactorkPackage.EMPTY_TRANSITION:
				sequence_EmptyTransition(context, (EmptyTransition) semanticObject); 
				return; 
			case QactorkPackage.END_ACTOR:
				sequence_EndActor(context, (EndActor) semanticObject); 
				return; 
			case QactorkPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case QactorkPackage.EVENT_TRANS_SWITCH:
				sequence_EventTransSwitch(context, (EventTransSwitch) semanticObject); 
				return; 
			case QactorkPackage.EXEC:
				sequence_Exec(context, (Exec) semanticObject); 
				return; 
			case QactorkPackage.FORWARD:
				sequence_Forward(context, (Forward) semanticObject); 
				return; 
			case QactorkPackage.GUARDED_STATE_ACTION:
				sequence_GuardedStateAction(context, (GuardedStateAction) semanticObject); 
				return; 
			case QactorkPackage.IF_SOLVED_ACTION:
				sequence_IfSolvedAction(context, (IfSolvedAction) semanticObject); 
				return; 
			case QactorkPackage.INVITATION:
				sequence_Invitation(context, (Invitation) semanticObject); 
				return; 
			case QactorkPackage.MEMO_TIME:
				sequence_MemoTime(context, (MemoTime) semanticObject); 
				return; 
			case QactorkPackage.MSG_COND:
				sequence_MsgCond(context, (MsgCond) semanticObject); 
				return; 
			case QactorkPackage.MSG_TRANS_SWITCH:
				sequence_MsgTransSwitch(context, (MsgTransSwitch) semanticObject); 
				return; 
			case QactorkPackage.NO_MSG_COND:
				sequence_NoMsgCond(context, (NoMsgCond) semanticObject); 
				return; 
			case QactorkPackage.NON_EMPTY_TRANSITION:
				sequence_NonEmptyTransition(context, (NonEmptyTransition) semanticObject); 
				return; 
			case QactorkPackage.PATOM_NUM:
				sequence_PAtomNum(context, (PAtomNum) semanticObject); 
				return; 
			case QactorkPackage.PATOM_STRING:
				sequence_PAtomString(context, (PAtomString) semanticObject); 
				return; 
			case QactorkPackage.PATOMIC:
				sequence_PAtomic(context, (PAtomic) semanticObject); 
				return; 
			case QactorkPackage.PSTRUCT:
				sequence_PStruct(context, (PStruct) semanticObject); 
				return; 
			case QactorkPackage.PSTRUCT_REF:
				sequence_PStructRef(context, (PStructRef) semanticObject); 
				return; 
			case QactorkPackage.PRINT:
				sequence_Print(context, (Print) semanticObject); 
				return; 
			case QactorkPackage.PRINT_CUR_MSG:
				sequence_PrintCurMsg(context, (PrintCurMsg) semanticObject); 
				return; 
			case QactorkPackage.QACTOR:
				sequence_QActor(context, (QActor) semanticObject); 
				return; 
			case QactorkPackage.QACTOR_CODED:
				sequence_QActorCoded(context, (QActorCoded) semanticObject); 
				return; 
			case QactorkPackage.QACTOR_EXTERNAL:
				sequence_QActorExternal(context, (QActorExternal) semanticObject); 
				return; 
			case QactorkPackage.QACTOR_SYSTEM:
				sequence_QActorSystem(context, (QActorSystem) semanticObject); 
				return; 
			case QactorkPackage.QACTOR_SYSTEM_SPEC:
				sequence_QActorSystemSpec(context, (QActorSystemSpec) semanticObject); 
				return; 
			case QactorkPackage.REPLY:
				sequence_Reply(context, (Reply) semanticObject); 
				return; 
			case QactorkPackage.REPLY_REQ:
				sequence_ReplyReq(context, (ReplyReq) semanticObject); 
				return; 
			case QactorkPackage.REPLY_TRANS_SWITCH:
				sequence_ReplyTransSwitch(context, (ReplyTransSwitch) semanticObject); 
				return; 
			case QactorkPackage.REQUEST:
				sequence_Request(context, (Request) semanticObject); 
				return; 
			case QactorkPackage.REQUEST_TRANS_SWITCH:
				sequence_RequestTransSwitch(context, (RequestTransSwitch) semanticObject); 
				return; 
			case QactorkPackage.SIGNAL:
				sequence_Signal(context, (Signal) semanticObject); 
				return; 
			case QactorkPackage.SOLVE_GOAL:
				sequence_SolveGoal(context, (SolveGoal) semanticObject); 
				return; 
			case QactorkPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case QactorkPackage.TIMEOUT_INT:
				sequence_TimeoutInt(context, (TimeoutInt) semanticObject); 
				return; 
			case QactorkPackage.TIMEOUT_SOL:
				sequence_TimeoutSol(context, (TimeoutSol) semanticObject); 
				return; 
			case QactorkPackage.TIMEOUT_VAR:
				sequence_TimeoutVar(context, (TimeoutVar) semanticObject); 
				return; 
			case QactorkPackage.TIMEOUT_VAR_REF:
				sequence_TimeoutVarRef(context, (TimeoutVarRef) semanticObject); 
				return; 
			case QactorkPackage.TOKEN:
				sequence_Token(context, (Token) semanticObject); 
				return; 
			case QactorkPackage.UPDATE_RESOURCE:
				sequence_UpdateResource(context, (UpdateResource) semanticObject); 
				return; 
			case QactorkPackage.VAR_REF:
				sequence_VarRef(context, (VarRef) semanticObject); 
				return; 
			case QactorkPackage.VAR_REF_IN_STR:
				sequence_VarRefInStr(context, (VarRefInStr) semanticObject); 
				return; 
			case QactorkPackage.VAR_SOL_REF:
				sequence_VarSolRef(context, (VarSolRef) semanticObject); 
				return; 
			case QactorkPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     StateAction returns Answer
	 *     Answer returns Answer
	 *
	 * Constraint:
	 *     (reqref=[Request|ID] msgref=[Reply|ID] val=PHead)
	 */
	protected void sequence_Answer(ISerializationContext context, Answer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.ANSWER__REQREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.ANSWER__REQREF));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.ANSWER__MSGREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.ANSWER__MSGREF));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.ANSWER__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.ANSWER__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnswerAccess().getReqrefRequestIDTerminalRuleCall_1_0_1(), semanticObject.eGet(QactorkPackage.Literals.ANSWER__REQREF, false));
		feeder.accept(grammarAccess.getAnswerAccess().getMsgrefReplyIDTerminalRuleCall_3_0_1(), semanticObject.eGet(QactorkPackage.Literals.ANSWER__MSGREF, false));
		feeder.accept(grammarAccess.getAnswerAccess().getValPHeadParserRuleCall_5_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns AnyAction
	 *     AnyAction returns AnyAction
	 *
	 * Constraint:
	 *     body=KCODE
	 */
	protected void sequence_AnyAction(ISerializationContext context, AnyAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.ANY_ACTION__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.ANY_ACTION__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnyActionAccess().getBodyKCODETerminalRuleCall_2_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BrokerSpec returns BrokerSpec
	 *
	 * Constraint:
	 *     (brokerHost=STRING brokerPort=INT eventtopic=STRING)
	 */
	protected void sequence_BrokerSpec(ISerializationContext context, BrokerSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.BROKER_SPEC__BROKER_HOST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.BROKER_SPEC__BROKER_HOST));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.BROKER_SPEC__BROKER_PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.BROKER_SPEC__BROKER_PORT));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.BROKER_SPEC__EVENTTOPIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.BROKER_SPEC__EVENTTOPIC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBrokerSpecAccess().getBrokerHostSTRINGTerminalRuleCall_1_0(), semanticObject.getBrokerHost());
		feeder.accept(grammarAccess.getBrokerSpecAccess().getBrokerPortINTTerminalRuleCall_3_0(), semanticObject.getBrokerPort());
		feeder.accept(grammarAccess.getBrokerSpecAccess().getEventtopicSTRINGTerminalRuleCall_5_0(), semanticObject.getEventtopic());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns CodeRunActor
	 *     CodeRun returns CodeRunActor
	 *     CodeRunActor returns CodeRunActor
	 *
	 * Constraint:
	 *     (aitem=QualifiedName (args+=PHead args+=PHead*)?)
	 */
	protected void sequence_CodeRunActor(ISerializationContext context, CodeRunActor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns CodeRunSimple
	 *     CodeRun returns CodeRunSimple
	 *     CodeRunSimple returns CodeRunSimple
	 *
	 * Constraint:
	 *     (bitem=QualifiedName (args+=PHead args+=PHead*)?)
	 */
	protected void sequence_CodeRunSimple(ISerializationContext context, CodeRunSimple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentIP returns ComponentIP
	 *
	 * Constraint:
	 *     (host=STRING port=INT)
	 */
	protected void sequence_ComponentIP(ISerializationContext context, ComponentIP semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.COMPONENT_IP__HOST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.COMPONENT_IP__HOST));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.COMPONENT_IP__PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.COMPONENT_IP__PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComponentIPAccess().getHostSTRINGTerminalRuleCall_3_0(), semanticObject.getHost());
		feeder.accept(grammarAccess.getComponentIPAccess().getPortINTTerminalRuleCall_5_0(), semanticObject.getPort());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Context returns Context
	 *
	 * Constraint:
	 *     (name=ID ip=ComponentIP mqtt?='+mqtt'?)
	 */
	protected void sequence_Context(ISerializationContext context, Context semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns DelayInt
	 *     Delay returns DelayInt
	 *     DelayInt returns DelayInt
	 *
	 * Constraint:
	 *     time=INT
	 */
	protected void sequence_DelayInt(ISerializationContext context, DelayInt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.DELAY_INT__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.DELAY_INT__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelayIntAccess().getTimeINTTerminalRuleCall_1_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns DelaySol
	 *     Delay returns DelaySol
	 *     DelaySol returns DelaySol
	 *
	 * Constraint:
	 *     refsoltime=VarSolRef
	 */
	protected void sequence_DelaySol(ISerializationContext context, DelaySol semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.DELAY_SOL__REFSOLTIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.DELAY_SOL__REFSOLTIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelaySolAccess().getRefsoltimeVarSolRefParserRuleCall_1_0(), semanticObject.getRefsoltime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns DelayVar
	 *     Delay returns DelayVar
	 *     DelayVar returns DelayVar
	 *
	 * Constraint:
	 *     refvar=Variable
	 */
	protected void sequence_DelayVar(ISerializationContext context, DelayVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.DELAY_VAR__REFVAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.DELAY_VAR__REFVAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelayVarAccess().getRefvarVariableParserRuleCall_1_0(), semanticObject.getRefvar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns DelayVref
	 *     Delay returns DelayVref
	 *     DelayVref returns DelayVref
	 *
	 * Constraint:
	 *     reftime=VarRef
	 */
	protected void sequence_DelayVref(ISerializationContext context, DelayVref semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.DELAY_VREF__REFTIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.DELAY_VREF__REFTIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelayVrefAccess().getReftimeVarRefParserRuleCall_1_0(), semanticObject.getReftime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns Demand
	 *     Demand returns Demand
	 *
	 * Constraint:
	 *     (dest=[QActorDeclaration|ID] msgref=[Request|ID] val=PHead)
	 */
	protected void sequence_Demand(ISerializationContext context, Demand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.DEMAND__DEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.DEMAND__DEST));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.DEMAND__MSGREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.DEMAND__MSGREF));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.DEMAND__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.DEMAND__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDemandAccess().getDestQActorDeclarationIDTerminalRuleCall_1_0_1(), semanticObject.eGet(QactorkPackage.Literals.DEMAND__DEST, false));
		feeder.accept(grammarAccess.getDemandAccess().getMsgrefRequestIDTerminalRuleCall_3_0_1(), semanticObject.eGet(QactorkPackage.Literals.DEMAND__MSGREF, false));
		feeder.accept(grammarAccess.getDemandAccess().getValPHeadParserRuleCall_5_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns DiscardMsg
	 *     DiscardMsg returns DiscardMsg
	 *
	 * Constraint:
	 *     discard?='On'?
	 */
	protected void sequence_DiscardMsg(ISerializationContext context, DiscardMsg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Dispatch
	 *     OutOnlyMessage returns Dispatch
	 *     Dispatch returns Dispatch
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Dispatch(ISerializationContext context, Dispatch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDispatchAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDispatchAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns Duration
	 *     Duration returns Duration
	 *
	 * Constraint:
	 *     (store=VARID start=VARID)
	 */
	protected void sequence_Duration(ISerializationContext context, Duration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.DURATION__STORE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.DURATION__STORE));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.DURATION__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.DURATION__START));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDurationAccess().getStoreVARIDTerminalRuleCall_2_0(), semanticObject.getStore());
		feeder.accept(grammarAccess.getDurationAccess().getStartVARIDTerminalRuleCall_4_0(), semanticObject.getStart());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns Emit
	 *     Emit returns Emit
	 *
	 * Constraint:
	 *     (msgref=[Event|ID] val=PHead)
	 */
	protected void sequence_Emit(ISerializationContext context, Emit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.EMIT__MSGREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.EMIT__MSGREF));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.EMIT__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.EMIT__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEmitAccess().getMsgrefEventIDTerminalRuleCall_1_0_1(), semanticObject.eGet(QactorkPackage.Literals.EMIT__MSGREF, false));
		feeder.accept(grammarAccess.getEmitAccess().getValPHeadParserRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns EmptyTransition
	 *     EmptyTransition returns EmptyTransition
	 *
	 * Constraint:
	 *     (targetState=[State|ID] (eguard=AnyAction othertargetState=[State|ID])?)
	 */
	protected void sequence_EmptyTransition(ISerializationContext context, EmptyTransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns EndActor
	 *     EndActor returns EndActor
	 *
	 * Constraint:
	 *     arg=INT
	 */
	protected void sequence_EndActor(ISerializationContext context, EndActor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.END_ACTOR__ARG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.END_ACTOR__ARG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEndActorAccess().getArgINTTerminalRuleCall_1_0(), semanticObject.getArg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InputTransition returns EventTransSwitch
	 *     EventTransSwitch returns EventTransSwitch
	 *
	 * Constraint:
	 *     (message=[Event|ID] guard=AnyAction? targetState=[State|ID])
	 */
	protected void sequence_EventTransSwitch(ISerializationContext context, EventTransSwitch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Event
	 *     OutOnlyMessage returns Event
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEventAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns Exec
	 *     Exec returns Exec
	 *
	 * Constraint:
	 *     action=STRING
	 */
	protected void sequence_Exec(ISerializationContext context, Exec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.EXEC__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.EXEC__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExecAccess().getActionSTRINGTerminalRuleCall_1_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns Forward
	 *     Forward returns Forward
	 *
	 * Constraint:
	 *     (dest=[QActorDeclaration|ID] msgref=[Dispatch|ID] val=PHead)
	 */
	protected void sequence_Forward(ISerializationContext context, Forward semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.FORWARD__DEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.FORWARD__DEST));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.FORWARD__MSGREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.FORWARD__MSGREF));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.FORWARD__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.FORWARD__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForwardAccess().getDestQActorDeclarationIDTerminalRuleCall_1_0_1(), semanticObject.eGet(QactorkPackage.Literals.FORWARD__DEST, false));
		feeder.accept(grammarAccess.getForwardAccess().getMsgrefDispatchIDTerminalRuleCall_3_0_1(), semanticObject.eGet(QactorkPackage.Literals.FORWARD__MSGREF, false));
		feeder.accept(grammarAccess.getForwardAccess().getValPHeadParserRuleCall_5_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns GuardedStateAction
	 *     GuardedStateAction returns GuardedStateAction
	 *
	 * Constraint:
	 *     (guard=AnyAction okactions+=StateAction* koactions+=StateAction*)
	 */
	protected void sequence_GuardedStateAction(ISerializationContext context, GuardedStateAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns IfSolvedAction
	 *     IfSolvedAction returns IfSolvedAction
	 *
	 * Constraint:
	 *     (solvedactions+=StateAction* notsolvedactions+=StateAction*)
	 */
	protected void sequence_IfSolvedAction(ISerializationContext context, IfSolvedAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Invitation
	 *     OutInMessage returns Invitation
	 *     Invitation returns Invitation
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Invitation(ISerializationContext context, Invitation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInvitationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInvitationAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns MemoTime
	 *     MemoTime returns MemoTime
	 *
	 * Constraint:
	 *     store=VARID
	 */
	protected void sequence_MemoTime(ISerializationContext context, MemoTime semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MEMO_TIME__STORE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MEMO_TIME__STORE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMemoTimeAccess().getStoreVARIDTerminalRuleCall_2_0(), semanticObject.getStore());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns MsgCond
	 *     MsgCond returns MsgCond
	 *
	 * Constraint:
	 *     (message=[Message|ID] msg=PHead condactions+=StateAction* ifnot=NoMsgCond?)
	 */
	protected void sequence_MsgCond(ISerializationContext context, MsgCond semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InputTransition returns MsgTransSwitch
	 *     MsgTransSwitch returns MsgTransSwitch
	 *
	 * Constraint:
	 *     (message=[Dispatch|ID] guard=AnyAction? targetState=[State|ID])
	 */
	protected void sequence_MsgTransSwitch(ISerializationContext context, MsgTransSwitch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NoMsgCond returns NoMsgCond
	 *
	 * Constraint:
	 *     notcondactions+=StateAction*
	 */
	protected void sequence_NoMsgCond(ISerializationContext context, NoMsgCond semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns NonEmptyTransition
	 *     NonEmptyTransition returns NonEmptyTransition
	 *
	 * Constraint:
	 *     (name=ID duration=Timeout? trans+=InputTransition* elseempty=EmptyTransition?)
	 */
	protected void sequence_NonEmptyTransition(ISerializationContext context, NonEmptyTransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns PAtomNum
	 *     PAtom returns PAtomNum
	 *     PAtomNum returns PAtomNum
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_PAtomNum(ISerializationContext context, PAtomNum semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.PATOM_NUM__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.PATOM_NUM__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPAtomNumAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns PAtomString
	 *     PAtom returns PAtomString
	 *     PAtomString returns PAtomString
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_PAtomString(ISerializationContext context, PAtomString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.PATOM_STRING__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.PATOM_STRING__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPAtomStringAccess().getValSTRINGTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns PAtomic
	 *     PAtom returns PAtomic
	 *     PAtomic returns PAtomic
	 *
	 * Constraint:
	 *     val=ID
	 */
	protected void sequence_PAtomic(ISerializationContext context, PAtomic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.PATOMIC__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.PATOMIC__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPAtomicAccess().getValIDTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns PStructRef
	 *     PStructRef returns PStructRef
	 *
	 * Constraint:
	 *     struct=PStruct
	 */
	protected void sequence_PStructRef(ISerializationContext context, PStructRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.PSTRUCT_REF__STRUCT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.PSTRUCT_REF__STRUCT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPStructRefAccess().getStructPStructParserRuleCall_1_0(), semanticObject.getStruct());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns PStruct
	 *     PStruct returns PStruct
	 *
	 * Constraint:
	 *     (functor=ID msgArg+=PHead msgArg+=PHead*)
	 */
	protected void sequence_PStruct(ISerializationContext context, PStruct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns PrintCurMsg
	 *     PrintCurMsg returns PrintCurMsg
	 *
	 * Constraint:
	 *     {PrintCurMsg}
	 */
	protected void sequence_PrintCurMsg(ISerializationContext context, PrintCurMsg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns Print
	 *     Print returns Print
	 *
	 * Constraint:
	 *     args=PHead
	 */
	protected void sequence_Print(ISerializationContext context, Print semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.PRINT__ARGS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.PRINT__ARGS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintAccess().getArgsPHeadParserRuleCall_3_0(), semanticObject.getArgs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QActorDeclaration returns QActorCoded
	 *     QActorCoded returns QActorCoded
	 *
	 * Constraint:
	 *     (name=ID context=[Context|ID] className=STRING)
	 */
	protected void sequence_QActorCoded(ISerializationContext context, QActorCoded semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.QACTOR_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.QACTOR_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.QACTOR_DECLARATION__CONTEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.QACTOR_DECLARATION__CONTEXT));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.QACTOR_CODED__CLASS_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.QACTOR_CODED__CLASS_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQActorCodedAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getQActorCodedAccess().getContextContextIDTerminalRuleCall_3_0_1(), semanticObject.eGet(QactorkPackage.Literals.QACTOR_DECLARATION__CONTEXT, false));
		feeder.accept(grammarAccess.getQActorCodedAccess().getClassNameSTRINGTerminalRuleCall_5_0(), semanticObject.getClassName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QActorDeclaration returns QActorExternal
	 *     QActorExternal returns QActorExternal
	 *
	 * Constraint:
	 *     (name=ID context=[Context|ID])
	 */
	protected void sequence_QActorExternal(ISerializationContext context, QActorExternal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.QACTOR_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.QACTOR_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.QACTOR_DECLARATION__CONTEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.QACTOR_DECLARATION__CONTEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQActorExternalAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getQActorExternalAccess().getContextContextIDTerminalRuleCall_3_0_1(), semanticObject.eGet(QactorkPackage.Literals.QACTOR_DECLARATION__CONTEXT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QActorSystemSpec returns QActorSystemSpec
	 *
	 * Constraint:
	 *     (name=ID mqttBroker=BrokerSpec? message+=Message* context+=Context* actor+=QActorDeclaration*)
	 */
	protected void sequence_QActorSystemSpec(ISerializationContext context, QActorSystemSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QActorSystem returns QActorSystem
	 *
	 * Constraint:
	 *     (trace?='-trace'? logmsg?='-msglog'? spec=QActorSystemSpec)
	 */
	protected void sequence_QActorSystem(ISerializationContext context, QActorSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QActorDeclaration returns QActor
	 *     QActor returns QActor
	 *
	 * Constraint:
	 *     (name=ID context=[Context|ID] start=AnyAction? states+=State*)
	 */
	protected void sequence_QActor(ISerializationContext context, QActor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns ReplyReq
	 *     ReplyReq returns ReplyReq
	 *
	 * Constraint:
	 *     (reqref=[Request|ID] msgref=[Request|ID] val=PHead)
	 */
	protected void sequence_ReplyReq(ISerializationContext context, ReplyReq semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.REPLY_REQ__REQREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.REPLY_REQ__REQREF));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.REPLY_REQ__MSGREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.REPLY_REQ__MSGREF));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.REPLY_REQ__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.REPLY_REQ__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReplyReqAccess().getReqrefRequestIDTerminalRuleCall_1_0_1(), semanticObject.eGet(QactorkPackage.Literals.REPLY_REQ__REQREF, false));
		feeder.accept(grammarAccess.getReplyReqAccess().getMsgrefRequestIDTerminalRuleCall_3_0_1(), semanticObject.eGet(QactorkPackage.Literals.REPLY_REQ__MSGREF, false));
		feeder.accept(grammarAccess.getReplyReqAccess().getValPHeadParserRuleCall_5_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InputTransition returns ReplyTransSwitch
	 *     ReplyTransSwitch returns ReplyTransSwitch
	 *
	 * Constraint:
	 *     (message=[Reply|ID] guard=AnyAction? targetState=[State|ID])
	 */
	protected void sequence_ReplyTransSwitch(ISerializationContext context, ReplyTransSwitch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Reply
	 *     OutInMessage returns Reply
	 *     Reply returns Reply
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Reply(ISerializationContext context, Reply semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReplyAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getReplyAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InputTransition returns RequestTransSwitch
	 *     RequestTransSwitch returns RequestTransSwitch
	 *
	 * Constraint:
	 *     (message=[Request|ID] guard=AnyAction? targetState=[State|ID])
	 */
	protected void sequence_RequestTransSwitch(ISerializationContext context, RequestTransSwitch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Request
	 *     OutInMessage returns Request
	 *     Request returns Request
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Request(ISerializationContext context, Request semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRequestAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRequestAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Signal
	 *     OutOnlyMessage returns Signal
	 *     Signal returns Signal
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Signal(ISerializationContext context, Signal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSignalAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns SolveGoal
	 *     SolveGoal returns SolveGoal
	 *
	 * Constraint:
	 *     (goal=PHead resVar=Variable?)
	 */
	protected void sequence_SolveGoal(ISerializationContext context, SolveGoal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=ID normal?='initial'? actions+=StateAction* transition=Transition?)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Timeout returns TimeoutInt
	 *     TimeoutInt returns TimeoutInt
	 *
	 * Constraint:
	 *     (msec=INT targetState=[State|ID])
	 */
	protected void sequence_TimeoutInt(ISerializationContext context, TimeoutInt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.TIMEOUT_INT__MSEC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.TIMEOUT_INT__MSEC));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.TIMEOUT__TARGET_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.TIMEOUT__TARGET_STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeoutIntAccess().getMsecINTTerminalRuleCall_1_0(), semanticObject.getMsec());
		feeder.accept(grammarAccess.getTimeoutIntAccess().getTargetStateStateIDTerminalRuleCall_3_0_1(), semanticObject.eGet(QactorkPackage.Literals.TIMEOUT__TARGET_STATE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Timeout returns TimeoutSol
	 *     TimeoutSol returns TimeoutSol
	 *
	 * Constraint:
	 *     (refsoltime=VarSolRef targetState=[State|ID])
	 */
	protected void sequence_TimeoutSol(ISerializationContext context, TimeoutSol semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.TIMEOUT_SOL__REFSOLTIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.TIMEOUT_SOL__REFSOLTIME));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.TIMEOUT__TARGET_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.TIMEOUT__TARGET_STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeoutSolAccess().getRefsoltimeVarSolRefParserRuleCall_1_0(), semanticObject.getRefsoltime());
		feeder.accept(grammarAccess.getTimeoutSolAccess().getTargetStateStateIDTerminalRuleCall_3_0_1(), semanticObject.eGet(QactorkPackage.Literals.TIMEOUT__TARGET_STATE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Timeout returns TimeoutVarRef
	 *     TimeoutVarRef returns TimeoutVarRef
	 *
	 * Constraint:
	 *     (refvar=VarRef targetState=[State|ID])
	 */
	protected void sequence_TimeoutVarRef(ISerializationContext context, TimeoutVarRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.TIMEOUT_VAR_REF__REFVAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.TIMEOUT_VAR_REF__REFVAR));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.TIMEOUT__TARGET_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.TIMEOUT__TARGET_STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeoutVarRefAccess().getRefvarVarRefParserRuleCall_1_0(), semanticObject.getRefvar());
		feeder.accept(grammarAccess.getTimeoutVarRefAccess().getTargetStateStateIDTerminalRuleCall_3_0_1(), semanticObject.eGet(QactorkPackage.Literals.TIMEOUT__TARGET_STATE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Timeout returns TimeoutVar
	 *     TimeoutVar returns TimeoutVar
	 *
	 * Constraint:
	 *     (variable=Variable targetState=[State|ID])
	 */
	protected void sequence_TimeoutVar(ISerializationContext context, TimeoutVar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.TIMEOUT_VAR__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.TIMEOUT_VAR__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.TIMEOUT__TARGET_STATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.TIMEOUT__TARGET_STATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeoutVarAccess().getVariableVariableParserRuleCall_1_0(), semanticObject.getVariable());
		feeder.accept(grammarAccess.getTimeoutVarAccess().getTargetStateStateIDTerminalRuleCall_3_0_1(), semanticObject.eGet(QactorkPackage.Literals.TIMEOUT__TARGET_STATE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Token
	 *     OutOnlyMessage returns Token
	 *     Token returns Token
	 *
	 * Constraint:
	 *     (name=ID msg=PHead)
	 */
	protected void sequence_Token(ISerializationContext context, Token semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__NAME));
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.MESSAGE__MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.MESSAGE__MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTokenAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTokenAccess().getMsgPHeadParserRuleCall_3_0(), semanticObject.getMsg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StateAction returns UpdateResource
	 *     UpdateResource returns UpdateResource
	 *
	 * Constraint:
	 *     val=AnyAction
	 */
	protected void sequence_UpdateResource(ISerializationContext context, UpdateResource semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.UPDATE_RESOURCE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.UPDATE_RESOURCE__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdateResourceAccess().getValAnyActionParserRuleCall_2_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns VarRefInStr
	 *     PAtom returns VarRefInStr
	 *     VarRefInStr returns VarRefInStr
	 *
	 * Constraint:
	 *     varName=VARID
	 */
	protected void sequence_VarRefInStr(ISerializationContext context, VarRefInStr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.VAR_REF_IN_STR__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.VAR_REF_IN_STR__VAR_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarRefInStrAccess().getVarNameVARIDTerminalRuleCall_1_0(), semanticObject.getVarName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns VarRef
	 *     PAtom returns VarRef
	 *     VarRef returns VarRef
	 *
	 * Constraint:
	 *     varName=VARID
	 */
	protected void sequence_VarRef(ISerializationContext context, VarRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.VAR_REF__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.VAR_REF__VAR_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarRefAccess().getVarNameVARIDTerminalRuleCall_1_0(), semanticObject.getVarName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns VarSolRef
	 *     PAtom returns VarSolRef
	 *     VarSolRef returns VarSolRef
	 *
	 * Constraint:
	 *     varName=VARID
	 */
	protected void sequence_VarSolRef(ISerializationContext context, VarSolRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.VAR_SOL_REF__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.VAR_SOL_REF__VAR_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarSolRefAccess().getVarNameVARIDTerminalRuleCall_1_0(), semanticObject.getVarName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PHead returns Variable
	 *     PAtom returns Variable
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     varName=VARID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QactorkPackage.Literals.VARIABLE__VAR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QactorkPackage.Literals.VARIABLE__VAR_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getVarNameVARIDTerminalRuleCall_1_0(), semanticObject.getVarName());
		feeder.finish();
	}
	
	
}
