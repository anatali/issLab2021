/**
 * generated by Xtext 2.22.0
 */
package it.unibo.qactork.impl;

import it.unibo.qactork.NoMsgCond;
import it.unibo.qactork.QactorkPackage;
import it.unibo.qactork.StateAction;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>No Msg Cond</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unibo.qactork.impl.NoMsgCondImpl#getNotcondactions <em>Notcondactions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NoMsgCondImpl extends MinimalEObjectImpl.Container implements NoMsgCond
{
  /**
   * The cached value of the '{@link #getNotcondactions() <em>Notcondactions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNotcondactions()
   * @generated
   * @ordered
   */
  protected EList<StateAction> notcondactions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NoMsgCondImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QactorkPackage.Literals.NO_MSG_COND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<StateAction> getNotcondactions()
  {
    if (notcondactions == null)
    {
      notcondactions = new EObjectContainmentEList<StateAction>(StateAction.class, this, QactorkPackage.NO_MSG_COND__NOTCONDACTIONS);
    }
    return notcondactions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QactorkPackage.NO_MSG_COND__NOTCONDACTIONS:
        return ((InternalEList<?>)getNotcondactions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QactorkPackage.NO_MSG_COND__NOTCONDACTIONS:
        return getNotcondactions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QactorkPackage.NO_MSG_COND__NOTCONDACTIONS:
        getNotcondactions().clear();
        getNotcondactions().addAll((Collection<? extends StateAction>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QactorkPackage.NO_MSG_COND__NOTCONDACTIONS:
        getNotcondactions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QactorkPackage.NO_MSG_COND__NOTCONDACTIONS:
        return notcondactions != null && !notcondactions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //NoMsgCondImpl
