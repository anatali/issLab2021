/**
 * generated by Xtext 2.22.0
 */
package it.unibo.qactork.impl;

import it.unibo.qactork.Message;
import it.unibo.qactork.MsgCond;
import it.unibo.qactork.NoMsgCond;
import it.unibo.qactork.PHead;
import it.unibo.qactork.QactorkPackage;
import it.unibo.qactork.StateAction;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Msg Cond</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unibo.qactork.impl.MsgCondImpl#getMessage <em>Message</em>}</li>
 *   <li>{@link it.unibo.qactork.impl.MsgCondImpl#getMsg <em>Msg</em>}</li>
 *   <li>{@link it.unibo.qactork.impl.MsgCondImpl#getCondactions <em>Condactions</em>}</li>
 *   <li>{@link it.unibo.qactork.impl.MsgCondImpl#getIfnot <em>Ifnot</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MsgCondImpl extends StateActionImpl implements MsgCond
{
  /**
   * The cached value of the '{@link #getMessage() <em>Message</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessage()
   * @generated
   * @ordered
   */
  protected Message message;

  /**
   * The cached value of the '{@link #getMsg() <em>Msg</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMsg()
   * @generated
   * @ordered
   */
  protected PHead msg;

  /**
   * The cached value of the '{@link #getCondactions() <em>Condactions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondactions()
   * @generated
   * @ordered
   */
  protected EList<StateAction> condactions;

  /**
   * The cached value of the '{@link #getIfnot() <em>Ifnot</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfnot()
   * @generated
   * @ordered
   */
  protected NoMsgCond ifnot;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MsgCondImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QactorkPackage.Literals.MSG_COND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message getMessage()
  {
    if (message != null && message.eIsProxy())
    {
      InternalEObject oldMessage = (InternalEObject)message;
      message = (Message)eResolveProxy(oldMessage);
      if (message != oldMessage)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, QactorkPackage.MSG_COND__MESSAGE, oldMessage, message));
      }
    }
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Message basicGetMessage()
  {
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMessage(Message newMessage)
  {
    Message oldMessage = message;
    message = newMessage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QactorkPackage.MSG_COND__MESSAGE, oldMessage, message));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PHead getMsg()
  {
    return msg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMsg(PHead newMsg, NotificationChain msgs)
  {
    PHead oldMsg = msg;
    msg = newMsg;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QactorkPackage.MSG_COND__MSG, oldMsg, newMsg);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMsg(PHead newMsg)
  {
    if (newMsg != msg)
    {
      NotificationChain msgs = null;
      if (msg != null)
        msgs = ((InternalEObject)msg).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QactorkPackage.MSG_COND__MSG, null, msgs);
      if (newMsg != null)
        msgs = ((InternalEObject)newMsg).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QactorkPackage.MSG_COND__MSG, null, msgs);
      msgs = basicSetMsg(newMsg, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QactorkPackage.MSG_COND__MSG, newMsg, newMsg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<StateAction> getCondactions()
  {
    if (condactions == null)
    {
      condactions = new EObjectContainmentEList<StateAction>(StateAction.class, this, QactorkPackage.MSG_COND__CONDACTIONS);
    }
    return condactions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NoMsgCond getIfnot()
  {
    return ifnot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIfnot(NoMsgCond newIfnot, NotificationChain msgs)
  {
    NoMsgCond oldIfnot = ifnot;
    ifnot = newIfnot;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QactorkPackage.MSG_COND__IFNOT, oldIfnot, newIfnot);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIfnot(NoMsgCond newIfnot)
  {
    if (newIfnot != ifnot)
    {
      NotificationChain msgs = null;
      if (ifnot != null)
        msgs = ((InternalEObject)ifnot).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QactorkPackage.MSG_COND__IFNOT, null, msgs);
      if (newIfnot != null)
        msgs = ((InternalEObject)newIfnot).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QactorkPackage.MSG_COND__IFNOT, null, msgs);
      msgs = basicSetIfnot(newIfnot, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QactorkPackage.MSG_COND__IFNOT, newIfnot, newIfnot));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QactorkPackage.MSG_COND__MSG:
        return basicSetMsg(null, msgs);
      case QactorkPackage.MSG_COND__CONDACTIONS:
        return ((InternalEList<?>)getCondactions()).basicRemove(otherEnd, msgs);
      case QactorkPackage.MSG_COND__IFNOT:
        return basicSetIfnot(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QactorkPackage.MSG_COND__MESSAGE:
        if (resolve) return getMessage();
        return basicGetMessage();
      case QactorkPackage.MSG_COND__MSG:
        return getMsg();
      case QactorkPackage.MSG_COND__CONDACTIONS:
        return getCondactions();
      case QactorkPackage.MSG_COND__IFNOT:
        return getIfnot();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QactorkPackage.MSG_COND__MESSAGE:
        setMessage((Message)newValue);
        return;
      case QactorkPackage.MSG_COND__MSG:
        setMsg((PHead)newValue);
        return;
      case QactorkPackage.MSG_COND__CONDACTIONS:
        getCondactions().clear();
        getCondactions().addAll((Collection<? extends StateAction>)newValue);
        return;
      case QactorkPackage.MSG_COND__IFNOT:
        setIfnot((NoMsgCond)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QactorkPackage.MSG_COND__MESSAGE:
        setMessage((Message)null);
        return;
      case QactorkPackage.MSG_COND__MSG:
        setMsg((PHead)null);
        return;
      case QactorkPackage.MSG_COND__CONDACTIONS:
        getCondactions().clear();
        return;
      case QactorkPackage.MSG_COND__IFNOT:
        setIfnot((NoMsgCond)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QactorkPackage.MSG_COND__MESSAGE:
        return message != null;
      case QactorkPackage.MSG_COND__MSG:
        return msg != null;
      case QactorkPackage.MSG_COND__CONDACTIONS:
        return condactions != null && !condactions.isEmpty();
      case QactorkPackage.MSG_COND__IFNOT:
        return ifnot != null;
    }
    return super.eIsSet(featureID);
  }

} //MsgCondImpl
