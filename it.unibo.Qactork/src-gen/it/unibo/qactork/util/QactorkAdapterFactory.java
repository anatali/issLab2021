/**
 * generated by Xtext 2.22.0
 */
package it.unibo.qactork.util;

import it.unibo.qactork.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see it.unibo.qactork.QactorkPackage
 * @generated
 */
public class QactorkAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static QactorkPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QactorkAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = QactorkPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QactorkSwitch<Adapter> modelSwitch =
    new QactorkSwitch<Adapter>()
    {
      @Override
      public Adapter caseQActorSystem(QActorSystem object)
      {
        return createQActorSystemAdapter();
      }
      @Override
      public Adapter caseQActorSystemSpec(QActorSystemSpec object)
      {
        return createQActorSystemSpecAdapter();
      }
      @Override
      public Adapter caseBrokerSpec(BrokerSpec object)
      {
        return createBrokerSpecAdapter();
      }
      @Override
      public Adapter caseMessage(Message object)
      {
        return createMessageAdapter();
      }
      @Override
      public Adapter caseOutOnlyMessage(OutOnlyMessage object)
      {
        return createOutOnlyMessageAdapter();
      }
      @Override
      public Adapter caseOutInMessage(OutInMessage object)
      {
        return createOutInMessageAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter caseSignal(Signal object)
      {
        return createSignalAdapter();
      }
      @Override
      public Adapter caseToken(Token object)
      {
        return createTokenAdapter();
      }
      @Override
      public Adapter caseDispatch(Dispatch object)
      {
        return createDispatchAdapter();
      }
      @Override
      public Adapter caseRequest(Request object)
      {
        return createRequestAdapter();
      }
      @Override
      public Adapter caseReply(Reply object)
      {
        return createReplyAdapter();
      }
      @Override
      public Adapter caseInvitation(Invitation object)
      {
        return createInvitationAdapter();
      }
      @Override
      public Adapter caseContext(Context object)
      {
        return createContextAdapter();
      }
      @Override
      public Adapter caseComponentIP(ComponentIP object)
      {
        return createComponentIPAdapter();
      }
      @Override
      public Adapter caseQActorDeclaration(QActorDeclaration object)
      {
        return createQActorDeclarationAdapter();
      }
      @Override
      public Adapter caseQActorExternal(QActorExternal object)
      {
        return createQActorExternalAdapter();
      }
      @Override
      public Adapter caseQActorCoded(QActorCoded object)
      {
        return createQActorCodedAdapter();
      }
      @Override
      public Adapter caseQActor(QActor object)
      {
        return createQActorAdapter();
      }
      @Override
      public Adapter caseState(State object)
      {
        return createStateAdapter();
      }
      @Override
      public Adapter caseStateAction(StateAction object)
      {
        return createStateActionAdapter();
      }
      @Override
      public Adapter caseIfSolvedAction(IfSolvedAction object)
      {
        return createIfSolvedActionAdapter();
      }
      @Override
      public Adapter caseGuardedStateAction(GuardedStateAction object)
      {
        return createGuardedStateActionAdapter();
      }
      @Override
      public Adapter casePrintCurMsg(PrintCurMsg object)
      {
        return createPrintCurMsgAdapter();
      }
      @Override
      public Adapter casePrint(Print object)
      {
        return createPrintAdapter();
      }
      @Override
      public Adapter caseSolveGoal(SolveGoal object)
      {
        return createSolveGoalAdapter();
      }
      @Override
      public Adapter caseDiscardMsg(DiscardMsg object)
      {
        return createDiscardMsgAdapter();
      }
      @Override
      public Adapter caseMemoTime(MemoTime object)
      {
        return createMemoTimeAdapter();
      }
      @Override
      public Adapter caseDuration(Duration object)
      {
        return createDurationAdapter();
      }
      @Override
      public Adapter caseForward(Forward object)
      {
        return createForwardAdapter();
      }
      @Override
      public Adapter caseEmit(Emit object)
      {
        return createEmitAdapter();
      }
      @Override
      public Adapter caseDemand(Demand object)
      {
        return createDemandAdapter();
      }
      @Override
      public Adapter caseAnswer(Answer object)
      {
        return createAnswerAdapter();
      }
      @Override
      public Adapter caseReplyReq(ReplyReq object)
      {
        return createReplyReqAdapter();
      }
      @Override
      public Adapter caseDelay(Delay object)
      {
        return createDelayAdapter();
      }
      @Override
      public Adapter caseDelayInt(DelayInt object)
      {
        return createDelayIntAdapter();
      }
      @Override
      public Adapter caseDelayVar(DelayVar object)
      {
        return createDelayVarAdapter();
      }
      @Override
      public Adapter caseDelayVref(DelayVref object)
      {
        return createDelayVrefAdapter();
      }
      @Override
      public Adapter caseDelaySol(DelaySol object)
      {
        return createDelaySolAdapter();
      }
      @Override
      public Adapter caseMsgCond(MsgCond object)
      {
        return createMsgCondAdapter();
      }
      @Override
      public Adapter caseEndActor(EndActor object)
      {
        return createEndActorAdapter();
      }
      @Override
      public Adapter caseUpdateResource(UpdateResource object)
      {
        return createUpdateResourceAdapter();
      }
      @Override
      public Adapter caseNoMsgCond(NoMsgCond object)
      {
        return createNoMsgCondAdapter();
      }
      @Override
      public Adapter caseAnyAction(AnyAction object)
      {
        return createAnyActionAdapter();
      }
      @Override
      public Adapter caseCodeRun(CodeRun object)
      {
        return createCodeRunAdapter();
      }
      @Override
      public Adapter caseCodeRunActor(CodeRunActor object)
      {
        return createCodeRunActorAdapter();
      }
      @Override
      public Adapter caseCodeRunSimple(CodeRunSimple object)
      {
        return createCodeRunSimpleAdapter();
      }
      @Override
      public Adapter caseExec(Exec object)
      {
        return createExecAdapter();
      }
      @Override
      public Adapter caseTransition(Transition object)
      {
        return createTransitionAdapter();
      }
      @Override
      public Adapter caseEmptyTransition(EmptyTransition object)
      {
        return createEmptyTransitionAdapter();
      }
      @Override
      public Adapter caseNonEmptyTransition(NonEmptyTransition object)
      {
        return createNonEmptyTransitionAdapter();
      }
      @Override
      public Adapter caseTimeout(Timeout object)
      {
        return createTimeoutAdapter();
      }
      @Override
      public Adapter caseTimeoutInt(TimeoutInt object)
      {
        return createTimeoutIntAdapter();
      }
      @Override
      public Adapter caseTimeoutVar(TimeoutVar object)
      {
        return createTimeoutVarAdapter();
      }
      @Override
      public Adapter caseTimeoutVarRef(TimeoutVarRef object)
      {
        return createTimeoutVarRefAdapter();
      }
      @Override
      public Adapter caseTimeoutSol(TimeoutSol object)
      {
        return createTimeoutSolAdapter();
      }
      @Override
      public Adapter caseInputTransition(InputTransition object)
      {
        return createInputTransitionAdapter();
      }
      @Override
      public Adapter caseEventTransSwitch(EventTransSwitch object)
      {
        return createEventTransSwitchAdapter();
      }
      @Override
      public Adapter caseMsgTransSwitch(MsgTransSwitch object)
      {
        return createMsgTransSwitchAdapter();
      }
      @Override
      public Adapter caseRequestTransSwitch(RequestTransSwitch object)
      {
        return createRequestTransSwitchAdapter();
      }
      @Override
      public Adapter caseReplyTransSwitch(ReplyTransSwitch object)
      {
        return createReplyTransSwitchAdapter();
      }
      @Override
      public Adapter casePHead(PHead object)
      {
        return createPHeadAdapter();
      }
      @Override
      public Adapter casePAtom(PAtom object)
      {
        return createPAtomAdapter();
      }
      @Override
      public Adapter casePAtomString(PAtomString object)
      {
        return createPAtomStringAdapter();
      }
      @Override
      public Adapter casePAtomic(PAtomic object)
      {
        return createPAtomicAdapter();
      }
      @Override
      public Adapter casePAtomNum(PAtomNum object)
      {
        return createPAtomNumAdapter();
      }
      @Override
      public Adapter casePStructRef(PStructRef object)
      {
        return createPStructRefAdapter();
      }
      @Override
      public Adapter casePStruct(PStruct object)
      {
        return createPStructAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseVarRef(VarRef object)
      {
        return createVarRefAdapter();
      }
      @Override
      public Adapter caseVarRefInStr(VarRefInStr object)
      {
        return createVarRefInStrAdapter();
      }
      @Override
      public Adapter caseVarSolRef(VarSolRef object)
      {
        return createVarSolRefAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.QActorSystem <em>QActor System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.QActorSystem
   * @generated
   */
  public Adapter createQActorSystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.QActorSystemSpec <em>QActor System Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.QActorSystemSpec
   * @generated
   */
  public Adapter createQActorSystemSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.BrokerSpec <em>Broker Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.BrokerSpec
   * @generated
   */
  public Adapter createBrokerSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Message <em>Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Message
   * @generated
   */
  public Adapter createMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.OutOnlyMessage <em>Out Only Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.OutOnlyMessage
   * @generated
   */
  public Adapter createOutOnlyMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.OutInMessage <em>Out In Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.OutInMessage
   * @generated
   */
  public Adapter createOutInMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Signal <em>Signal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Signal
   * @generated
   */
  public Adapter createSignalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Token <em>Token</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Token
   * @generated
   */
  public Adapter createTokenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Dispatch <em>Dispatch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Dispatch
   * @generated
   */
  public Adapter createDispatchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Request <em>Request</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Request
   * @generated
   */
  public Adapter createRequestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Reply <em>Reply</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Reply
   * @generated
   */
  public Adapter createReplyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Invitation <em>Invitation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Invitation
   * @generated
   */
  public Adapter createInvitationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Context <em>Context</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Context
   * @generated
   */
  public Adapter createContextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.ComponentIP <em>Component IP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.ComponentIP
   * @generated
   */
  public Adapter createComponentIPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.QActorDeclaration <em>QActor Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.QActorDeclaration
   * @generated
   */
  public Adapter createQActorDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.QActorExternal <em>QActor External</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.QActorExternal
   * @generated
   */
  public Adapter createQActorExternalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.QActorCoded <em>QActor Coded</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.QActorCoded
   * @generated
   */
  public Adapter createQActorCodedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.QActor <em>QActor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.QActor
   * @generated
   */
  public Adapter createQActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.State <em>State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.State
   * @generated
   */
  public Adapter createStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.StateAction <em>State Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.StateAction
   * @generated
   */
  public Adapter createStateActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.IfSolvedAction <em>If Solved Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.IfSolvedAction
   * @generated
   */
  public Adapter createIfSolvedActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.GuardedStateAction <em>Guarded State Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.GuardedStateAction
   * @generated
   */
  public Adapter createGuardedStateActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.PrintCurMsg <em>Print Cur Msg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.PrintCurMsg
   * @generated
   */
  public Adapter createPrintCurMsgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Print <em>Print</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Print
   * @generated
   */
  public Adapter createPrintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.SolveGoal <em>Solve Goal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.SolveGoal
   * @generated
   */
  public Adapter createSolveGoalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.DiscardMsg <em>Discard Msg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.DiscardMsg
   * @generated
   */
  public Adapter createDiscardMsgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.MemoTime <em>Memo Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.MemoTime
   * @generated
   */
  public Adapter createMemoTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Duration <em>Duration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Duration
   * @generated
   */
  public Adapter createDurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Forward <em>Forward</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Forward
   * @generated
   */
  public Adapter createForwardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Emit <em>Emit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Emit
   * @generated
   */
  public Adapter createEmitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Demand <em>Demand</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Demand
   * @generated
   */
  public Adapter createDemandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Answer <em>Answer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Answer
   * @generated
   */
  public Adapter createAnswerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.ReplyReq <em>Reply Req</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.ReplyReq
   * @generated
   */
  public Adapter createReplyReqAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Delay <em>Delay</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Delay
   * @generated
   */
  public Adapter createDelayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.DelayInt <em>Delay Int</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.DelayInt
   * @generated
   */
  public Adapter createDelayIntAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.DelayVar <em>Delay Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.DelayVar
   * @generated
   */
  public Adapter createDelayVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.DelayVref <em>Delay Vref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.DelayVref
   * @generated
   */
  public Adapter createDelayVrefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.DelaySol <em>Delay Sol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.DelaySol
   * @generated
   */
  public Adapter createDelaySolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.MsgCond <em>Msg Cond</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.MsgCond
   * @generated
   */
  public Adapter createMsgCondAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.EndActor <em>End Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.EndActor
   * @generated
   */
  public Adapter createEndActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.UpdateResource <em>Update Resource</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.UpdateResource
   * @generated
   */
  public Adapter createUpdateResourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.NoMsgCond <em>No Msg Cond</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.NoMsgCond
   * @generated
   */
  public Adapter createNoMsgCondAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.AnyAction <em>Any Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.AnyAction
   * @generated
   */
  public Adapter createAnyActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.CodeRun <em>Code Run</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.CodeRun
   * @generated
   */
  public Adapter createCodeRunAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.CodeRunActor <em>Code Run Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.CodeRunActor
   * @generated
   */
  public Adapter createCodeRunActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.CodeRunSimple <em>Code Run Simple</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.CodeRunSimple
   * @generated
   */
  public Adapter createCodeRunSimpleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Exec <em>Exec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Exec
   * @generated
   */
  public Adapter createExecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Transition <em>Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Transition
   * @generated
   */
  public Adapter createTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.EmptyTransition <em>Empty Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.EmptyTransition
   * @generated
   */
  public Adapter createEmptyTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.NonEmptyTransition <em>Non Empty Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.NonEmptyTransition
   * @generated
   */
  public Adapter createNonEmptyTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Timeout <em>Timeout</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Timeout
   * @generated
   */
  public Adapter createTimeoutAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.TimeoutInt <em>Timeout Int</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.TimeoutInt
   * @generated
   */
  public Adapter createTimeoutIntAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.TimeoutVar <em>Timeout Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.TimeoutVar
   * @generated
   */
  public Adapter createTimeoutVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.TimeoutVarRef <em>Timeout Var Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.TimeoutVarRef
   * @generated
   */
  public Adapter createTimeoutVarRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.TimeoutSol <em>Timeout Sol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.TimeoutSol
   * @generated
   */
  public Adapter createTimeoutSolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.InputTransition <em>Input Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.InputTransition
   * @generated
   */
  public Adapter createInputTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.EventTransSwitch <em>Event Trans Switch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.EventTransSwitch
   * @generated
   */
  public Adapter createEventTransSwitchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.MsgTransSwitch <em>Msg Trans Switch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.MsgTransSwitch
   * @generated
   */
  public Adapter createMsgTransSwitchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.RequestTransSwitch <em>Request Trans Switch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.RequestTransSwitch
   * @generated
   */
  public Adapter createRequestTransSwitchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.ReplyTransSwitch <em>Reply Trans Switch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.ReplyTransSwitch
   * @generated
   */
  public Adapter createReplyTransSwitchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.PHead <em>PHead</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.PHead
   * @generated
   */
  public Adapter createPHeadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.PAtom <em>PAtom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.PAtom
   * @generated
   */
  public Adapter createPAtomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.PAtomString <em>PAtom String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.PAtomString
   * @generated
   */
  public Adapter createPAtomStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.PAtomic <em>PAtomic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.PAtomic
   * @generated
   */
  public Adapter createPAtomicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.PAtomNum <em>PAtom Num</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.PAtomNum
   * @generated
   */
  public Adapter createPAtomNumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.PStructRef <em>PStruct Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.PStructRef
   * @generated
   */
  public Adapter createPStructRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.PStruct <em>PStruct</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.PStruct
   * @generated
   */
  public Adapter createPStructAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.VarRef <em>Var Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.VarRef
   * @generated
   */
  public Adapter createVarRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.VarRefInStr <em>Var Ref In Str</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.VarRefInStr
   * @generated
   */
  public Adapter createVarRefInStrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link it.unibo.qactork.VarSolRef <em>Var Sol Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see it.unibo.qactork.VarSolRef
   * @generated
   */
  public Adapter createVarSolRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //QactorkAdapterFactory
