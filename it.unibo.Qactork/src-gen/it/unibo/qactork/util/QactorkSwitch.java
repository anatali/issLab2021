/**
 * generated by Xtext 2.22.0
 */
package it.unibo.qactork.util;

import it.unibo.qactork.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see it.unibo.qactork.QactorkPackage
 * @generated
 */
public class QactorkSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static QactorkPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QactorkSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = QactorkPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case QactorkPackage.QACTOR_SYSTEM:
      {
        QActorSystem qActorSystem = (QActorSystem)theEObject;
        T result = caseQActorSystem(qActorSystem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.QACTOR_SYSTEM_SPEC:
      {
        QActorSystemSpec qActorSystemSpec = (QActorSystemSpec)theEObject;
        T result = caseQActorSystemSpec(qActorSystemSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.BROKER_SPEC:
      {
        BrokerSpec brokerSpec = (BrokerSpec)theEObject;
        T result = caseBrokerSpec(brokerSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.MESSAGE:
      {
        Message message = (Message)theEObject;
        T result = caseMessage(message);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.OUT_ONLY_MESSAGE:
      {
        OutOnlyMessage outOnlyMessage = (OutOnlyMessage)theEObject;
        T result = caseOutOnlyMessage(outOnlyMessage);
        if (result == null) result = caseMessage(outOnlyMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.OUT_IN_MESSAGE:
      {
        OutInMessage outInMessage = (OutInMessage)theEObject;
        T result = caseOutInMessage(outInMessage);
        if (result == null) result = caseMessage(outInMessage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.EVENT:
      {
        Event event = (Event)theEObject;
        T result = caseEvent(event);
        if (result == null) result = caseOutOnlyMessage(event);
        if (result == null) result = caseMessage(event);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.SIGNAL:
      {
        Signal signal = (Signal)theEObject;
        T result = caseSignal(signal);
        if (result == null) result = caseOutOnlyMessage(signal);
        if (result == null) result = caseMessage(signal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.TOKEN:
      {
        Token token = (Token)theEObject;
        T result = caseToken(token);
        if (result == null) result = caseOutOnlyMessage(token);
        if (result == null) result = caseMessage(token);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.DISPATCH:
      {
        Dispatch dispatch = (Dispatch)theEObject;
        T result = caseDispatch(dispatch);
        if (result == null) result = caseOutOnlyMessage(dispatch);
        if (result == null) result = caseMessage(dispatch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.REQUEST:
      {
        Request request = (Request)theEObject;
        T result = caseRequest(request);
        if (result == null) result = caseOutInMessage(request);
        if (result == null) result = caseMessage(request);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.REPLY:
      {
        Reply reply = (Reply)theEObject;
        T result = caseReply(reply);
        if (result == null) result = caseOutInMessage(reply);
        if (result == null) result = caseMessage(reply);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.INVITATION:
      {
        Invitation invitation = (Invitation)theEObject;
        T result = caseInvitation(invitation);
        if (result == null) result = caseOutInMessage(invitation);
        if (result == null) result = caseMessage(invitation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.CONTEXT:
      {
        Context context = (Context)theEObject;
        T result = caseContext(context);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.COMPONENT_IP:
      {
        ComponentIP componentIP = (ComponentIP)theEObject;
        T result = caseComponentIP(componentIP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.QACTOR_DECLARATION:
      {
        QActorDeclaration qActorDeclaration = (QActorDeclaration)theEObject;
        T result = caseQActorDeclaration(qActorDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.QACTOR_EXTERNAL:
      {
        QActorExternal qActorExternal = (QActorExternal)theEObject;
        T result = caseQActorExternal(qActorExternal);
        if (result == null) result = caseQActorDeclaration(qActorExternal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.QACTOR_CODED:
      {
        QActorCoded qActorCoded = (QActorCoded)theEObject;
        T result = caseQActorCoded(qActorCoded);
        if (result == null) result = caseQActorDeclaration(qActorCoded);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.QACTOR:
      {
        QActor qActor = (QActor)theEObject;
        T result = caseQActor(qActor);
        if (result == null) result = caseQActorDeclaration(qActor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.STATE:
      {
        State state = (State)theEObject;
        T result = caseState(state);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.STATE_ACTION:
      {
        StateAction stateAction = (StateAction)theEObject;
        T result = caseStateAction(stateAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.IF_SOLVED_ACTION:
      {
        IfSolvedAction ifSolvedAction = (IfSolvedAction)theEObject;
        T result = caseIfSolvedAction(ifSolvedAction);
        if (result == null) result = caseStateAction(ifSolvedAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.GUARDED_STATE_ACTION:
      {
        GuardedStateAction guardedStateAction = (GuardedStateAction)theEObject;
        T result = caseGuardedStateAction(guardedStateAction);
        if (result == null) result = caseStateAction(guardedStateAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.PRINT_CUR_MSG:
      {
        PrintCurMsg printCurMsg = (PrintCurMsg)theEObject;
        T result = casePrintCurMsg(printCurMsg);
        if (result == null) result = caseStateAction(printCurMsg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.PRINT:
      {
        Print print = (Print)theEObject;
        T result = casePrint(print);
        if (result == null) result = caseStateAction(print);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.SOLVE_GOAL:
      {
        SolveGoal solveGoal = (SolveGoal)theEObject;
        T result = caseSolveGoal(solveGoal);
        if (result == null) result = caseStateAction(solveGoal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.DISCARD_MSG:
      {
        DiscardMsg discardMsg = (DiscardMsg)theEObject;
        T result = caseDiscardMsg(discardMsg);
        if (result == null) result = caseStateAction(discardMsg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.MEMO_TIME:
      {
        MemoTime memoTime = (MemoTime)theEObject;
        T result = caseMemoTime(memoTime);
        if (result == null) result = caseStateAction(memoTime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.DURATION:
      {
        Duration duration = (Duration)theEObject;
        T result = caseDuration(duration);
        if (result == null) result = caseStateAction(duration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.FORWARD:
      {
        Forward forward = (Forward)theEObject;
        T result = caseForward(forward);
        if (result == null) result = caseStateAction(forward);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.EMIT:
      {
        Emit emit = (Emit)theEObject;
        T result = caseEmit(emit);
        if (result == null) result = caseStateAction(emit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.DEMAND:
      {
        Demand demand = (Demand)theEObject;
        T result = caseDemand(demand);
        if (result == null) result = caseStateAction(demand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.ANSWER:
      {
        Answer answer = (Answer)theEObject;
        T result = caseAnswer(answer);
        if (result == null) result = caseStateAction(answer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.REPLY_REQ:
      {
        ReplyReq replyReq = (ReplyReq)theEObject;
        T result = caseReplyReq(replyReq);
        if (result == null) result = caseStateAction(replyReq);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.DELAY:
      {
        Delay delay = (Delay)theEObject;
        T result = caseDelay(delay);
        if (result == null) result = caseStateAction(delay);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.DELAY_INT:
      {
        DelayInt delayInt = (DelayInt)theEObject;
        T result = caseDelayInt(delayInt);
        if (result == null) result = caseDelay(delayInt);
        if (result == null) result = caseStateAction(delayInt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.DELAY_VAR:
      {
        DelayVar delayVar = (DelayVar)theEObject;
        T result = caseDelayVar(delayVar);
        if (result == null) result = caseDelay(delayVar);
        if (result == null) result = caseStateAction(delayVar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.DELAY_VREF:
      {
        DelayVref delayVref = (DelayVref)theEObject;
        T result = caseDelayVref(delayVref);
        if (result == null) result = caseDelay(delayVref);
        if (result == null) result = caseStateAction(delayVref);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.DELAY_SOL:
      {
        DelaySol delaySol = (DelaySol)theEObject;
        T result = caseDelaySol(delaySol);
        if (result == null) result = caseDelay(delaySol);
        if (result == null) result = caseStateAction(delaySol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.MSG_COND:
      {
        MsgCond msgCond = (MsgCond)theEObject;
        T result = caseMsgCond(msgCond);
        if (result == null) result = caseStateAction(msgCond);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.END_ACTOR:
      {
        EndActor endActor = (EndActor)theEObject;
        T result = caseEndActor(endActor);
        if (result == null) result = caseStateAction(endActor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.UPDATE_RESOURCE:
      {
        UpdateResource updateResource = (UpdateResource)theEObject;
        T result = caseUpdateResource(updateResource);
        if (result == null) result = caseStateAction(updateResource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.NO_MSG_COND:
      {
        NoMsgCond noMsgCond = (NoMsgCond)theEObject;
        T result = caseNoMsgCond(noMsgCond);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.ANY_ACTION:
      {
        AnyAction anyAction = (AnyAction)theEObject;
        T result = caseAnyAction(anyAction);
        if (result == null) result = caseStateAction(anyAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.CODE_RUN:
      {
        CodeRun codeRun = (CodeRun)theEObject;
        T result = caseCodeRun(codeRun);
        if (result == null) result = caseStateAction(codeRun);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.CODE_RUN_ACTOR:
      {
        CodeRunActor codeRunActor = (CodeRunActor)theEObject;
        T result = caseCodeRunActor(codeRunActor);
        if (result == null) result = caseCodeRun(codeRunActor);
        if (result == null) result = caseStateAction(codeRunActor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.CODE_RUN_SIMPLE:
      {
        CodeRunSimple codeRunSimple = (CodeRunSimple)theEObject;
        T result = caseCodeRunSimple(codeRunSimple);
        if (result == null) result = caseCodeRun(codeRunSimple);
        if (result == null) result = caseStateAction(codeRunSimple);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.EXEC:
      {
        Exec exec = (Exec)theEObject;
        T result = caseExec(exec);
        if (result == null) result = caseStateAction(exec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.TRANSITION:
      {
        Transition transition = (Transition)theEObject;
        T result = caseTransition(transition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.EMPTY_TRANSITION:
      {
        EmptyTransition emptyTransition = (EmptyTransition)theEObject;
        T result = caseEmptyTransition(emptyTransition);
        if (result == null) result = caseTransition(emptyTransition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.NON_EMPTY_TRANSITION:
      {
        NonEmptyTransition nonEmptyTransition = (NonEmptyTransition)theEObject;
        T result = caseNonEmptyTransition(nonEmptyTransition);
        if (result == null) result = caseTransition(nonEmptyTransition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.TIMEOUT:
      {
        Timeout timeout = (Timeout)theEObject;
        T result = caseTimeout(timeout);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.TIMEOUT_INT:
      {
        TimeoutInt timeoutInt = (TimeoutInt)theEObject;
        T result = caseTimeoutInt(timeoutInt);
        if (result == null) result = caseTimeout(timeoutInt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.TIMEOUT_VAR:
      {
        TimeoutVar timeoutVar = (TimeoutVar)theEObject;
        T result = caseTimeoutVar(timeoutVar);
        if (result == null) result = caseTimeout(timeoutVar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.TIMEOUT_VAR_REF:
      {
        TimeoutVarRef timeoutVarRef = (TimeoutVarRef)theEObject;
        T result = caseTimeoutVarRef(timeoutVarRef);
        if (result == null) result = caseTimeout(timeoutVarRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.TIMEOUT_SOL:
      {
        TimeoutSol timeoutSol = (TimeoutSol)theEObject;
        T result = caseTimeoutSol(timeoutSol);
        if (result == null) result = caseTimeout(timeoutSol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.INPUT_TRANSITION:
      {
        InputTransition inputTransition = (InputTransition)theEObject;
        T result = caseInputTransition(inputTransition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.EVENT_TRANS_SWITCH:
      {
        EventTransSwitch eventTransSwitch = (EventTransSwitch)theEObject;
        T result = caseEventTransSwitch(eventTransSwitch);
        if (result == null) result = caseInputTransition(eventTransSwitch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.MSG_TRANS_SWITCH:
      {
        MsgTransSwitch msgTransSwitch = (MsgTransSwitch)theEObject;
        T result = caseMsgTransSwitch(msgTransSwitch);
        if (result == null) result = caseInputTransition(msgTransSwitch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.REQUEST_TRANS_SWITCH:
      {
        RequestTransSwitch requestTransSwitch = (RequestTransSwitch)theEObject;
        T result = caseRequestTransSwitch(requestTransSwitch);
        if (result == null) result = caseInputTransition(requestTransSwitch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.REPLY_TRANS_SWITCH:
      {
        ReplyTransSwitch replyTransSwitch = (ReplyTransSwitch)theEObject;
        T result = caseReplyTransSwitch(replyTransSwitch);
        if (result == null) result = caseInputTransition(replyTransSwitch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.PHEAD:
      {
        PHead pHead = (PHead)theEObject;
        T result = casePHead(pHead);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.PATOM:
      {
        PAtom pAtom = (PAtom)theEObject;
        T result = casePAtom(pAtom);
        if (result == null) result = casePHead(pAtom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.PATOM_STRING:
      {
        PAtomString pAtomString = (PAtomString)theEObject;
        T result = casePAtomString(pAtomString);
        if (result == null) result = casePAtom(pAtomString);
        if (result == null) result = casePHead(pAtomString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.PATOMIC:
      {
        PAtomic pAtomic = (PAtomic)theEObject;
        T result = casePAtomic(pAtomic);
        if (result == null) result = casePAtom(pAtomic);
        if (result == null) result = casePHead(pAtomic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.PATOM_NUM:
      {
        PAtomNum pAtomNum = (PAtomNum)theEObject;
        T result = casePAtomNum(pAtomNum);
        if (result == null) result = casePAtom(pAtomNum);
        if (result == null) result = casePHead(pAtomNum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.PSTRUCT_REF:
      {
        PStructRef pStructRef = (PStructRef)theEObject;
        T result = casePStructRef(pStructRef);
        if (result == null) result = casePHead(pStructRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.PSTRUCT:
      {
        PStruct pStruct = (PStruct)theEObject;
        T result = casePStruct(pStruct);
        if (result == null) result = casePHead(pStruct);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = casePAtom(variable);
        if (result == null) result = casePHead(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.VAR_REF:
      {
        VarRef varRef = (VarRef)theEObject;
        T result = caseVarRef(varRef);
        if (result == null) result = casePAtom(varRef);
        if (result == null) result = casePHead(varRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.VAR_REF_IN_STR:
      {
        VarRefInStr varRefInStr = (VarRefInStr)theEObject;
        T result = caseVarRefInStr(varRefInStr);
        if (result == null) result = casePAtom(varRefInStr);
        if (result == null) result = casePHead(varRefInStr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case QactorkPackage.VAR_SOL_REF:
      {
        VarSolRef varSolRef = (VarSolRef)theEObject;
        T result = caseVarSolRef(varSolRef);
        if (result == null) result = casePAtom(varSolRef);
        if (result == null) result = casePHead(varSolRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>QActor System</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>QActor System</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQActorSystem(QActorSystem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>QActor System Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>QActor System Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQActorSystemSpec(QActorSystemSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Broker Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Broker Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBrokerSpec(BrokerSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessage(Message object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Out Only Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Out Only Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutOnlyMessage(OutOnlyMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Out In Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Out In Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutInMessage(OutInMessage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvent(Event object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignal(Signal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Token</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Token</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseToken(Token object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Dispatch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Dispatch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDispatch(Dispatch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Request</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Request</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequest(Request object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reply</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reply</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReply(Reply object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invitation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invitation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvitation(Invitation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Context</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Context</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContext(Context object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component IP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component IP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentIP(ComponentIP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>QActor Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>QActor Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQActorDeclaration(QActorDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>QActor External</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>QActor External</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQActorExternal(QActorExternal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>QActor Coded</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>QActor Coded</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQActorCoded(QActorCoded object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>QActor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>QActor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQActor(QActor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseState(State object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStateAction(StateAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Solved Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Solved Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfSolvedAction(IfSolvedAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Guarded State Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Guarded State Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGuardedStateAction(GuardedStateAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print Cur Msg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print Cur Msg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrintCurMsg(PrintCurMsg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrint(Print object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Solve Goal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Solve Goal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSolveGoal(SolveGoal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Discard Msg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Discard Msg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDiscardMsg(DiscardMsg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Memo Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Memo Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemoTime(MemoTime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Duration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Duration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDuration(Duration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Forward</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Forward</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForward(Forward object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Emit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Emit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEmit(Emit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Demand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Demand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDemand(Demand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Answer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Answer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnswer(Answer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reply Req</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reply Req</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReplyReq(ReplyReq object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delay</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delay</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelay(Delay object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delay Int</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delay Int</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelayInt(DelayInt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delay Var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delay Var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelayVar(DelayVar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delay Vref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delay Vref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelayVref(DelayVref object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delay Sol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delay Sol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDelaySol(DelaySol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Msg Cond</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Msg Cond</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMsgCond(MsgCond object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>End Actor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>End Actor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEndActor(EndActor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Update Resource</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Update Resource</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdateResource(UpdateResource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>No Msg Cond</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>No Msg Cond</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNoMsgCond(NoMsgCond object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Any Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Any Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnyAction(AnyAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code Run</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code Run</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCodeRun(CodeRun object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code Run Actor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code Run Actor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCodeRunActor(CodeRunActor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Code Run Simple</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Code Run Simple</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCodeRunSimple(CodeRunSimple object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExec(Exec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransition(Transition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Empty Transition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Empty Transition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEmptyTransition(EmptyTransition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Non Empty Transition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Non Empty Transition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNonEmptyTransition(NonEmptyTransition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timeout</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timeout</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeout(Timeout object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timeout Int</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timeout Int</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeoutInt(TimeoutInt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timeout Var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timeout Var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeoutVar(TimeoutVar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timeout Var Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timeout Var Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeoutVarRef(TimeoutVarRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timeout Sol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timeout Sol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeoutSol(TimeoutSol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input Transition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input Transition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputTransition(InputTransition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Trans Switch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Trans Switch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventTransSwitch(EventTransSwitch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Msg Trans Switch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Msg Trans Switch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMsgTransSwitch(MsgTransSwitch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Request Trans Switch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Request Trans Switch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequestTransSwitch(RequestTransSwitch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reply Trans Switch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reply Trans Switch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReplyTransSwitch(ReplyTransSwitch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PHead</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PHead</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePHead(PHead object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtom(PAtom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomString(PAtomString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtomic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtomic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomic(PAtomic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PAtom Num</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PAtom Num</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePAtomNum(PAtomNum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PStruct Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PStruct Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePStructRef(PStructRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PStruct</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PStruct</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePStruct(PStruct object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarRef(VarRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Ref In Str</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Ref In Str</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarRefInStr(VarRefInStr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Sol Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Sol Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarSolRef(VarSolRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //QactorkSwitch
