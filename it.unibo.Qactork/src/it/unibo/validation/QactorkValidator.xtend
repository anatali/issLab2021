/*
 * generated by Xtext 2.16.0
 */
package it.unibo.validation

import org.eclipse.xtext.validation.Check
import it.unibo.qactork.QActor
import it.unibo.qactork.Context
import it.unibo.qactork.QActorSystemSpec
import it.unibo.qactork.PStruct
import it.unibo.qactork.QActorExternal
import it.unibo.qactork.Message
import it.unibo.qactork.NonEmptyTransition

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class QactorkValidator extends AbstractQactorkValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					QactorkPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
/*
 * Only one initial plan is allowed
 */
	 @Check
	 def checkSingleNormalPlan(QActor qactor) {
	 	//println("		### checkSingleNormalPlan "+robot.plans.iterator.filter[normal].size)
	 	if( qactor.states.iterator.filter[normal].size == 0	)
	 		error("A initial state is required", null )	//QactorPackage.Literals.QACTOR__NAME
	 	if( qactor.states.iterator.filter[normal].size > 1	)
	 		error("Only one initial state is allowed", null ) // QactorPackage.Literals.QACTOR__NAME
 	 }
/*
 * System name must be lowercase
 */
 	@Check
	def systemName(QActorSystemSpec sys){
		if( ! sys.name.toLowerCase.equals(sys.name) )
			error("Uppercase letters not allowed for system name", null ) //QactorPackage.Literals.QACTOR__NAME
 	}

/*
 * Actor names must be lowercase
 */
 	@Check
	def actorName(QActor qa){
		if( ! qa.name.toLowerCase.equals(qa.name) )
			error("Uppercase letters not allowed in actor's names", null ) //QactorPackage.Literals.QACTOR__NAME
 	}
	def actorName(QActorExternal qa){
		if( ! qa.name.toLowerCase.equals(qa.name) )
			error("Uppercase letters not allowed in actor's names", null ) //QactorPackage.Literals.QACTOR__NAME
 	}

/*
 * Context names must start with a lowercase
 */
 	@Check
	def ctxName(Context ctx){
		//System.out.println("VALIDATING  " +  ctx.name + " " + ( ctx.name.toLowerCase.charAt(0) == ctx.name.charAt(0) ) )
		if( ! ( ctx.name.toLowerCase.charAt(0) == ctx.name.charAt(0) ) )
			error("Context name must start with a lowercase ", null ) //QactorPackage.Literals.QACTOR__NAME
 	   
		if( ! ( ctx.name.startsWith("ctx") ) )
			warning("Context name should start with ctx", null )  
 	}

/*
 * Event payload must be  a Struct
 */	
  	@Check
 	def eventPayload( Message ev){
 		if( ! (ev.msg instanceof PStruct) ) error("msg payload must be a Struct", null)
 	}
 	
 	@Check
 	def emptyAfterTransition( NonEmptyTransition t){
 		if( t.elseempty !== null ) error("AVOID else clause: not yet implemented", null)
 	}
}
