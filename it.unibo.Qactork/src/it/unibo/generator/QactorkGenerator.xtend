/*
 * generated by Xtext 2.16.0
 */
package it.unibo.generator

import org.eclipse.emf.ecore.resource.Resource
import it.unibo.qactork.generator.common.GenUtils
import it.unibo.qactork.QActorSystemSpec
import it.unibo.qactork.generator.common.SysKb
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.AbstractGenerator
import java.io.FileReader
import it.unibo.qactork.QActorSystem

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class QactorkGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))

		println(" *** QactorGenerator resource.URI=" + resource.URI ) ;
		println(" *** QactorGenerator resource.URI.fileExtension=" + resource.URI.fileExtension) ;
		println(" *** user.dir "     + System.getProperty("user.dir"));
		println(" *** user.home "    + System.getProperty("user.home"));
		mygenerate(resource, fsa);	 

	}
	//Added by AN 
	def mygenerate(Resource resource, IFileSystemAccess fsa) {
		val genQActorSystem = new GenQActorSystem
		val kb = new SysKb
		
	    GenUtils.setFsa(fsa)
	    GenUtils.setFileExtension(resource.URI.fileExtension)
  		for(system: resource.allContents.toIterable.filter( typeof(QActorSystem) )) {	
  			kb.setDomainModel( system.spec )		
  			genQActorSystem.doGenerate(system, kb)
 		}		
	}
	
 
	
}
