/**
 * generated by Xtext 2.16.0
 */
package it.unibo.validation;

import it.unibo.qactork.Context;
import it.unibo.qactork.Message;
import it.unibo.qactork.NonEmptyTransition;
import it.unibo.qactork.QActor;
import it.unibo.qactork.QActorExternal;
import it.unibo.qactork.QActorSystemSpec;
<<<<<<< HEAD
import it.unibo.validation.AbstractQactorkValidator;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
=======
>>>>>>> 7efacd5a8281a8c84ee98242a79e04636849baaf

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class QactorkValidator extends AbstractQactorkValidator {
  /**
   * Only one initial plan is allowed
   */
  /* @Check
   */public Object checkSingleNormalPlan(final QActor qactor) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field states is undefined for the type QActor"
      + "\nThe method or field normal is undefined"
      + "\nThe method error(String, Object) is undefined"
      + "\nThe method or field states is undefined for the type QActor"
      + "\nThe method or field normal is undefined"
      + "\nThe method error(String, Object) is undefined"
      + "\niterator cannot be resolved"
      + "\nfilter cannot be resolved"
      + "\nsize cannot be resolved"
      + "\n== cannot be resolved"
      + "\niterator cannot be resolved"
      + "\nfilter cannot be resolved"
      + "\nsize cannot be resolved"
      + "\n> cannot be resolved");
  }
  
  /**
   * System name must be lowercase
   */
  /* @Check
   */public Object systemName(final QActorSystemSpec sys) {
    throw new Error("Unresolved compilation problems:"
      + "\n! cannot be resolved."
      + "\nThe method error(String, Object) is undefined");
  }
  
  /**
   * Actor names must be lowercase
   */
  /* @Check
   */public Object actorName(final QActor qa) {
    throw new Error("Unresolved compilation problems:"
      + "\n! cannot be resolved."
      + "\nThe method error(String, Object) is undefined");
  }
  
  public Object actorName(final QActorExternal qa) {
    throw new Error("Unresolved compilation problems:"
      + "\n! cannot be resolved."
      + "\nThe method error(String, Object) is undefined");
  }
  
  /**
   * Context names must start with a lowercase
   */
  /* @Check
   */public Object ctxName(final Context ctx) {
    throw new Error("Unresolved compilation problems:"
      + "\n== cannot be resolved."
      + "\nThe method error(String, Object) is undefined"
      + "\n! cannot be resolved."
      + "\nThe method warning(String, Object) is undefined"
      + "\n! cannot be resolved");
  }
  
  /**
   * Event payload must be  a Struct
   */
  /* @Check
   */public Object eventPayload(final Message ev) {
    throw new Error("Unresolved compilation problems:"
      + "\n! cannot be resolved."
      + "\nThe method error(String, Object) is undefined");
  }
  
  /* @Check
   */public Object emptyAfterTransition(final NonEmptyTransition t) {
    throw new Error("Unresolved compilation problems:"
      + "\n!== cannot be resolved."
      + "\nThe method error(String, Object) is undefined");
  }
}
