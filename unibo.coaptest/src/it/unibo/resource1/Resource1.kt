/* Generated by AN DISI Unibo */ 
package it.unibo.resource1

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Resource1 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var Count = 1  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						updateResourceRep( "$name : $Count"  
						)
						 Count = Count + 1
						 		   MsgUtil.outmagenta( "${name} count= $Count" )
						 		   
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitchGuarded({ Count < 50  
					}) )
					transition( edgeName="goto",targetState="endJob", cond=doswitchGuarded({! ( Count < 50  
					) }) )
				}	 
				state("endJob") { //this:State
					action { //it:State
						println("$name ENDS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
