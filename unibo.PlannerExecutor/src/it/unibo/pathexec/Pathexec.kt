/* Generated by AN DISI Unibo */ 
package it.unibo.pathexec

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Pathexec ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var CurMoveTodo = ""  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("pathexec starts")
					}
					 transition(edgeName="t00",targetState="doThePath",cond=whenRequest("dopath"))
				}	 
				state("doThePath") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 pathut.setPathFromRequest(currentMsg)  
						println("pathTodo = ${pathut.getPathTodo()}")
					}
					 transition( edgeName="goto",targetState="nextMove", cond=doswitch() )
				}	 
				state("nextMove") { //this:State
					action { //it:State
						 CurMoveTodo = pathut.nextMove()  
						println("curMoveTodooooooooooooooooo $CurMoveTodo")
					}
					 transition( edgeName="goto",targetState="endWorkOk", cond=doswitchGuarded({ CurMoveTodo.length == 0  
					}) )
					transition( edgeName="goto",targetState="doMove", cond=doswitchGuarded({! ( CurMoveTodo.length == 0  
					) }) )
				}	 
				state("doMove") { //this:State
					action { //it:State
						if(  CurMoveTodo == "w"  
						 ){request("step", "step(350)" ,"basicrobot" )  
						}
						else
						 {forward("cmd", "cmd($CurMoveTodo)" ,"basicrobot" ) 
						 }
						stateTimer = TimerActor("timer_doMove", 
							scope, context!!, "local_tout_pathexec_doMove", 1000.toLong() )
					}
					 transition(edgeName="t01",targetState="nextMove",cond=whenTimeout("local_tout_pathexec_doMove"))   
					transition(edgeName="t02",targetState="nextMove",cond=whenReply("stepdone"))
					transition(edgeName="t03",targetState="endWorkKo",cond=whenReply("stepfail"))
				}	 
				state("endWorkOk") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("PATH DONE - BYE")
					}
				}	 
				state("endWorkKo") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 var pathTodo = pathut.getPathTodo()  
						println("PATH FAILURE - SORRY. pathTodo=$pathTodo")
					}
				}	 
				state("testRobotCommands") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						request("step", "step(350)" ,"basicrobot" )  
						stateTimer = TimerActor("timer_testRobotCommands", 
							scope, context!!, "local_tout_pathexec_testRobotCommands", 500.toLong() )
					}
					 transition(edgeName="t04",targetState="again",cond=whenTimeout("local_tout_pathexec_testRobotCommands"))   
				}	 
				state("again") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t05",targetState="testRobotCommands",cond=whenReply("stepdone"))
					transition(edgeName="t06",targetState="endWorkKo",cond=whenReply("stepfail"))
				}	 
			}
		}
}
