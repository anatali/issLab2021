/* Generated by AN DISI Unibo */ 
package it.unibo.pathexec

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Pathexec ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var CurMoveTodo = ""    //Upcase, since var to be used in guards
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						  CurMoveTodo = ""  
						println("pathexec ready ...")
					}
					 transition(edgeName="t00",targetState="doThePath",cond=whenRequest("dopath"))
				}	 
				state("doThePath") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("dopath(PATH)"), Term.createTerm("dopath(PATH)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								pathut.setPath( payloadArg(0)  )
						}
						println("pathexec pathTodo = ${pathut.getPathTodo()}")
					}
					 transition( edgeName="goto",targetState="nextMove", cond=doswitch() )
				}	 
				state("nextMove") { //this:State
					action { //it:State
						 CurMoveTodo = pathut.nextMove()  
					}
					 transition( edgeName="goto",targetState="endWorkOk", cond=doswitchGuarded({ CurMoveTodo.length == 0  
					}) )
					transition( edgeName="goto",targetState="doMove", cond=doswitchGuarded({! ( CurMoveTodo.length == 0  
					) }) )
				}	 
				state("doMove") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="doMoveW", cond=doswitchGuarded({ CurMoveTodo == "w"  
					}) )
					transition( edgeName="goto",targetState="doMoveTurn", cond=doswitchGuarded({! ( CurMoveTodo == "w"  
					) }) )
				}	 
				state("doMoveTurn") { //this:State
					action { //it:State
						forward("cmd", "cmd($CurMoveTodo)" ,"basicrobot" ) 
						stateTimer = TimerActor("timer_doMoveTurn", 
							scope, context!!, "local_tout_pathexec_doMoveTurn", 300.toLong() )
					}
					 transition(edgeName="t01",targetState="nextMove",cond=whenTimeout("local_tout_pathexec_doMoveTurn"))   
				}	 
				state("doMoveW") { //this:State
					action { //it:State
						request("step", "step(350)" ,"basicrobot" )  
					}
					 transition(edgeName="t02",targetState="endWorkKo",cond=whenEvent("alarm"))
					transition(edgeName="t03",targetState="nextMove",cond=whenReply("stepdone"))
					transition(edgeName="t04",targetState="endWorkKo",cond=whenReply("stepfail"))
				}	 
				state("endWorkOk") { //this:State
					action { //it:State
						println("endWorkOk: PATH DONE - BYE")
						answer("dopath", "dopathdone", "dopathdone(ok)"   )  
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("endWorkKo") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 var PathStillTodo = pathut.getPathTodo()  
						println("PATH FAILURE - SORRY. PathStillTodo=$PathStillTodo")
						answer("dopath", "dopathfail", "dopathfail($PathStillTodo)"   )  
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
