System robotappl1

Request  dopath   : dopath( PATH, OWNER )
Reply dopathdone  : dopathdone( ARG ) 
Reply dopathfail  : dopathfail( ARG )

Context ctxbasicrobot  ip [host="127.0.0.1" port=8020]  
Context ctxrobotappl   ip [host="localhost" port=8078]

ExternalQActor pathexec context ctxbasicrobot  

QActor robotappl1 context ctxrobotappl{
	[# val Inmapname   = "map2019.txt"  
	   var PathTodo    =  ""  
	   var Mapp        = "|r, 1, 1, 1, 1, 1, 1,"
/* |r, 1, 1, 1, 1, 1, 1, 
|1, 1, 1, 1, 1, 1, 1, 
|1, 1, X, 1, 1, 1, 1,  
|1, 1, 0, 1, 1, 1, 1, 
|1, 1, 0, 1, 1, 1, 1, 
|X, X, 0, X, X, X, X,*/
	#]
	State activate initial {
 		//run unibo.kotlin.planner22Util.loadRoomMap( inmapname )	  
 		run unibo.kotlin.planner22Util.createRoomMapFromTextfile("$Inmapname")
  		run unibo.kotlin.planner22Util.initAI() 
// 		run unibo.kotlin.planner22Util.updateMap(  "l", "" )
// 		[# val athome = unibo.kotlin.planner22Util.atHome(); println("athome=$athome")#]
 		println("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu")
 		//run unibo.kotlin.planner22Util.showMap()
 		run unibo.kotlin.planner22Util.showCurrentRobotState()
	}
	Goto work
	
	State work{
		run unibo.kotlin.planner22Util.setGoal(1,1)  //---x--->
		[# PathTodo = unibo.kotlin.planner22Util.doPlan().toString() 
		#] //List<aima.core.agent.Action> 
		println("Azioni pianificate: $PathTodo")
		//[# val MapStr = java.util.Base64.getEncoder().encodeToString("1, 1, 1") #]
 		request pathexec -m dopath : dopath( $PathTodo, map($Mapp) )  
	}
	Transition t0 whenReply dopathdone -> pathok 
				  whenReply dopathfail -> pathko
  	
	State pathok{ 
		printCurrentMessage
	}
	
    State pathko{
		printCurrentMessage
		run unibo.kotlin.planner22Util.showMap()
		run unibo.kotlin.planner22Util.showCurrentRobotState()
 		//emit alarm : alarm(obstacle) 		
 	}

    State end{
    	println("BYE")
    }
} 