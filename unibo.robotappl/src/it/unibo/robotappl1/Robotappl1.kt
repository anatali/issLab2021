/* Generated by AN DISI Unibo */ 
package it.unibo.robotappl1

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotappl1 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "activate"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 val inmapname   = "map2019"  
		return { //this:ActionBasciFsm
				state("activate") { //this:State
					action { //it:State
						unibo.kotlin.planner22Util.initAI(  )
						unibo.kotlin.planner22Util.loadRoomMap( inmapname  )
						unibo.kotlin.planner22Util.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						unibo.kotlin.planner22Util.setGoal( 3, 3  )
						 var Pactions = unibo.kotlin.planner22Util.doPlan()  //java.util.List<aima.core.agent.Action> 
									
						println("$Pactions")
					}
				}	 
				state("doPath") { //this:State
					action { //it:State
						 val PathTodo =  "wwlwlwwlwl"   
						println("doexplore starts $PathTodo")
						request("dopath", "dopath($PathTodo,pathcaller)" ,"pathexec" )  
					}
					 transition(edgeName="t00",targetState="pathok",cond=whenReply("dopathdone"))
					transition(edgeName="t01",targetState="pathko",cond=whenReply("dopathfail"))
				}	 
				state("pathok") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
				state("pathko") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
				state("end") { //this:State
					action { //it:State
						println("BYE")
					}
				}	 
			}
		}
}
