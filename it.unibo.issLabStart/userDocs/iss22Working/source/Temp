in anaconda 
lsvirtualenv -l
sphinks-quickstart  //TUTTO ATTACCATO

.. _test di Turing : https://it.wikipedia.org/wiki/Test_di_Turing

:remark:`
.. epigraph:: 

.. _tcpsupprt:

.. list-table:: 
  :widths: 50,50
  :width: 100%

  * - a1
    - a2
  * - b1
    - b2

``  ``

:doc:`RadarGuiCoap`

.. _My target:

`My target`_.

:ref:`SonarModel<SonarModel>`

===
---
+++
%%%
&&&

:emphasize-lines: 8,10,16



.. Mettte le immagini fianco a fianco
.. .. image:: ./_static/img/rasp/Raspberry-Pi-GPIO-Layout-Model-B-Plus.png
..   :width: 20%
.. .. image:: ./_static/img/rasp/Raspberry-Pi-GPIO-Layout-Model-B-Plus.png
..   :width: 20%   ``





 Il delay qualificato cone **'HORRIBLE EFFECT'**  potrebbe ripercuotersi sui client 
in modo inaccettabile e mettere in crisi un sistema. Si veda ad esempio


.. _HorribleEffetcts:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Sperimentazione di effetti indesiderati
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Gli effetti dei ritardi indotti dagli observer POJO possono essere sperimentati invocando, ad esempio,
``SonarUsageMainWithContextTcp`` dopo avere tolto il commento sul delay nel metodo update di
 `SonarObserverFortesting`_.


==================================================
Il concetto di contesto
==================================================

.. include:: ContextServer.rst 

==================================================
Da TCP a CoAP
==================================================

.. include:: DaTcpACoAP.rst 


==================================================
WebSockets
==================================================

.. include:: WebSockets.rst 



==================================
Distribuzione del RadarSystem
==================================  

.. include:: RadarSystemDeploy.rst  

Il metodo ``elaborate`` con argomento :ref:`ApplMessage<ApplMessage>` viene presentato subito qui,
ma verrà introdotto solo più avanti
(si veda :ref:`IApplMsgHandler<IApplMsgHandlerEsteso>` in :doc:`ContestiContenitori`) quando avremo la necessità di 
introdurre nei messaggi anche informazioni relative al nome del mittente e del destinatario.



===========================   ===========================    =========================== 
     Server                              id                        entry
---------------------------   ---------------------------   ---------------------------
:ref:`TcpContextServer`               nome host                 port
:ref:`MqttContextServer`              id del client              nome topic     
:ref:`CoapContextServer`                    -                      -
===========================   ===========================    ===========================   

.. list-table:: 
  :widths: 50,50
  :width: 100%
  
  * - Il committente fornisce software relativo al Led ?
    - Si, ``led25GpioTurnOn.sh`` e ``led25GpioTurnOff.sh`` (progetto *it.unibo.rasp2021*)

 
.. Test funzionale
.. Si veda :doc:`ContextServer`.

La distribuzione del *RadarSystem* assume due forme:

- la forma di una libreria di nome ``it.unibo.enablerCleanArch-1.0.jar`` prodotta dal progetto it.unibo.enablerCleanArch_
- la forma di una applicazione web (che utiliza la libreria precedente) prodotta dal progetto ``it.unibo.msenabler``


.. _enablerCleanArch:

Alcune webcam hanno la funzione di bilanciare automaticamente la loro luminosità. 
Ad esempio, in una stanza buia percepiscono che la luminosità deve essere aumentata mentre in un'area luminosa, 
la luminosità potrebbe dover essere ridotta. 
La fotocamera lo fa esaminando i propri fotogrammi e analizzandoli.
Quando si verifica una cattura di un'immagine subito dopo l'inizializzazione della fotocamera, 
non ha visto dati sufficienti per sapere quanto sia luminoso l'ambiente e sembra che presuppone 
che l'ambiente sia SUPER luminoso e riduce al minimo il controllo dell'esposizione (risultando in un'immagine nera). 
Man mano che vengono esaminati più fotogrammi, la fotocamera regola rapidamente le impostazioni di esposizione.

Per utilizzare fswebcam, possiamo fornirgli l'opzione la -S <num>cui opzione è il numero di fotogrammi 
che la fotocamera dovrebbe "vedere" e "saltare" prima di acquisire l'immagine desiderata. 
Trovo che se fornisco un salto della 20fotocamera ha avuto abbastanza fotogrammi per regolare automaticamente 
la sua esposizione e poiché stiamo elaborando 30 fotogrammi al secondo, 
è ancora meno di un secondo di ritardo per catturare 1 fotogramma. 
Per lo streaming video, non dovremmo avere il problema in quanto la fotocamera verrà inizializzata 
e rimarrà inizializzata.




-------------------------------------------
RobotCleaner:  display area
-------------------------------------------    

:worktodo:`WORKTODO: aggiornare la DisplayArea con informazioni di stato`

Il ``RobotCleaner`` deve emettere informazioni di stato che vengono inviate alla pagina Web mediante 
una webSocket su 8085.

L'attore che realizza il ``RobotCleaner`` costituisce una risorsa CoAP osservabile, che viene 
aggiornata usando il metodo  ``updateResourceRep``


In MainRobotCleaner:

.. code:: Java

	public void doJob() {
  		Qak22Context.configureTheSystem(this);
 
		ActorObserver obs = new ActorObserver("8083",robotName);
		obs.setWebSocketHandler(WebSocketConfiguration.wshandler);
 	};


- ActorObserver: opera come CoAP client e offre un setWebSocketHandler (wsh)
- Attiva un client.observe con argomento un CoapHandler che invoca wsh.sendToAll
- wsminimal.js in RobotCleanerGui.html si connette a una ws su localhost:8085 e riceve (onmessage) dati 
  che visualizza in messageWindow.innerHTML  