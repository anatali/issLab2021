.. role:: red 
.. role:: blue 
.. role:: remark
.. role:: worktodo 

.. _mvc: https://it.wikipedia.org/wiki/Model-view-controller

.. _MVP: https://www.nexsoft.it/model-view-presenter/

=============================================
SonarObservable
=============================================

Tenendo conto di quanto detto in *Indicazioni-sul-processo-di-produzione* (:doc:`CostruireSoftware`), 
impostiamo un processo di produzione del software relativo a un nuovo insieme di requisiti


.. _requirements:

--------------------------------------
SonarObservable: Requisiti
--------------------------------------

Si desidera realizzare una versione osservabile (*SonarObservable*) del dispositivo Sonar introdotto in :ref:`Il Sonar` che soddisfi i seguenti 
requisiti:

- il *SonarObservable* deve inviare informazioni a tutti componenti software interessati alla rilevazione dei valori di distanza;
- il *SonarObservable* deve fornire valori di distanza solo quando questi si modificano in modo significativo;
- i componenti interessati ai valori di distanza prodotti dal *SonarObservable* sono denominati *Observers* e pssono risiedere
  sullo stesso nodo del *SonarObservable* (cioè sul RaspberryPi) o su un nodo remoto (ad esempio sul PC);
- il funzionamento del *SonarObservable* deve essere testato in modo automatizzato ponendo un ostacolo a distanza fissa ``DTESTING1`` davanti
  ad esso, controllando che tutti gli *Observers* ricevano il valore ``DTESTING1``. Dopo un qualche tempo, si modifica
  la posizione dell'ostacolo a una nuova distanza ``DTESTING2`` e si controlla che gli tutti gli *Observers* ricevano il valore ``DTESTING2``.



.. _sonarOsservabile: 

+++++++++++++++++++++++++++++++++++++++++++
SonarObservable: analisi del problema
+++++++++++++++++++++++++++++++++++++++++++

La transizione ad un Sonar osservabile prospettata in :ref:`patternObserver` può essere affrontata pensando il nuovo dispositivo in due modi:

- come una risorsa che modifica il proprio stato interno ad ogni passo di produzione 
  e che invia agli observer una notifica sul nuovo stato;
- come ad un processo che aggiorna un oggetto :blue:`DistanceMeasured` implementato come una
  :blue:`risorsa osservabile`.

Come nel caso del Sonar non osservabile, il tipo di dato 
notificato agli observer potrebbe essere **int**, **String** o **IDistance**.
Poichè gli observer potrebbero essere non locali e scritti in linguaggi diversi da Java, optiamo qui
per notificare dati in forma di **String**, in modo da agevolare l'interoperabilità. 


Il pattern observer 'classico' prevede che la sorgente di informazione (ne nostro caso il Sonar o DistanceMeasured)
offra metodi per la registrazione dei riferimenti agli oggetti Observer interessati agli aggiornamenti.
Inoltre ogni Observer deve implementare un metodo (``update``) che viene invocato dal Sonar all'interno del suo 
Thread di lavoro o mediante altro Thread appositamente creato. L'aggiornamento degli Observer pone infatti un
problema:
- se la sorgente invoca l'update degli observer nel suo Thread di lavoro, essa può subire un ritardo che 
  dipende dal tempo di esecuzione dell'Observer; se un Observer entra in loop, la sorgente di blocca;
- se la sorgente invoca l'update degli observer in un Thread creato ad hoc, vi può essere un prolificazione 
  non tollerabile di Thread nel caso di molti observer.

Ci sentiamo quindi indotti a introdurre un principio:

:remark:`il funzionamento di una sorgente osservabile non dovrebbe essere influenzato dalla presenza di Observer`

.. In meccanica quantistica, un Observer sembra determinare la natura stessa della sorgente  

Secondo quseto principio, il Sonar non dovrebbe nemmeno diventare osservabile attraverso l'uso di protocollo
publish-sbuscribe in quanto dovrebbe utilizzare (e quindi dipendere da) un broker.

Da un punto di vista concettuale una sorgente di informazione dovrebbe risultare osservabile quando capace di 
emettere informazione in modo che possa essere ricevuta da un numero qualsiasi di osservatori interessati
grazie a meccanismi che non alterano il funzionamento della sorgente.

Questa idea fa sorgere un abstraction gap, in quanto suggerisce un nuovo modello:

:remark:`una sorgente di informazione è osservabile quando emette tale informazione in forma di evento`

Un evento è stato introdotto in :ref:`Terminologia di riferimento` come un messaggio che non ha un preciso destinatario.




In ogni caso, volendo impostare il Sonar come un dispositivo osservabile, 
introduciamo un nuovo contratto, che estende il precedente:

.. _ISonarObservable:

.. _IObserver:

.. code:: java

  interface ISonarObservable  extends ISonar{
    void register( IObserver obs );		 
    void unregister( IObserver obs );
  }

  interface IObserver extends java.util.Observer{
    public void update( int value );
    //From Observer:public void update(Observable o,Object news) 
  }

Nel quadro di un programma ad oggetti convenzionale, un ``ISonarObservable``  è un ``ISonar`` 
con la capacità di registrare osservatori e di invocare, ad ogni aggiornamento del valore
di distanza, il metodo ``update`` di tutti gli osservatori registrati.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
La distanza come risorsa osservabile
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

In questa versione, optiamo per l'idea che il Sonar-observable sia un processo che aggiorna 
il valore  di una distanza osservabile (distanza misurata)
che implementa l'interfaccia ``IDistanceMeasured``:

.. code:: java

  public interface IDistanceMeasured extends IDistance{
    public void setVal( IDistance d );
    public IDistance getDistance(   );
    public void addObserver(Observer obs);   //implemented by Observable
    public void deleteObserver(Observer obs);//implemented by Observable
  }

La casse :blue:`DistanceMeasured` che realizza il concetto di :blue:`distanza misurata osservabile` può essere definita
come segue:

.. code:: java

  public class DistanceMeasured 
        extends java.util.Observable implements IDistanceMeasured{
  private IDistance d;
  public DistanceMeasured() {}
    @Override
    public void setVal( IDistance v ) {
      d = v;
      setChanged(); //IMPORTANT!!
      notifyObservers( d );		
    }
    @Override
    public IDistance getDistance(   ) { return d; }	
    @Override
    public int getVal() { return d.getVal(); }	
    @Override
    public String toString() { return ""+ getVal(); }
  }



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SonarModelObservable
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Il ``SonarModelObservable`` viene definito cone una specializzazione del precedente 
:ref:`SonarModel`, che implementa i metodi di registrazione ridiregendoli alla distanza osservabile.

.. code:: java

  public abstract class SonarModelObservable 
          extends SonarModel implements ISonarObservable  {
  protected IDistanceMeasured observableDistance  ;		

  //Factory method
  public static ISonarObservable create() {
    if( DomainSystemConfig.simulation )  return new SonarMockObservable();
    else  return new SonarConcreteObservable();		
  }
  @Override
  public IDistance getDistance(){ return observableDistance; }
  @Override
  public void register(IObserver obs){ observableDistance.addObserver(obs);}
  @Override
  public void unregister(IObserver obs){observableDistance.deleteObserver(obs);}
  @Override
  protected void updateDistance(int d){observableDistance.setVal(new Distance(d));}	
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SonarMockObservable
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Ora il SonarMock osservabile può essere definito ridefinendo il metodo asbstract 
relativo alla produzione dei dati in modo analogo a quanto fatto per il Sonar:

.. _SonarMockObservable:

.. code:: java

  public class SonarMockObservable extends SonarModelObservable{

  @Override
  protected void sonarSetUp() {
    observableDistance = new DistanceMeasured( );
    observableDistance.setVal(curVal);
  } 	

  @Override
  protected void sonarProduce() {
    if( DomainSystemConfig.testing ) {
      updateDistance( DomainSystemConfig.testingDistance );			      
      stopped = true;  //one shot
    }else {
      int v = curVal.getVal() - 1;
      updateDistance( v );			    
      stopped = ( v == 0 );
      Utils.delay(DomainSystemConfig.sonarDelay); //avoid fast generation
    }		
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SonarConcreteObservable
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Analogamente, la versione osservabile del :ref:`SonarConcrete<Il SonarConcrete>` si ottiene ridefinendo (in assenza di ereditarietà
multipla) i metodi astratti  di ``setUp`` e ``sonarProduce``. 

.. _SonarConcreteObservable:

.. code:: java

  public class SonarConcreteObservable extends SonarModelObservable 
  private  BufferedReader reader ;
  private int lastSonarVal      = 0;
  private Process p             = null;
	 
    @Override
    protected void sonarSetUp() {
   	    observableDistance = new DistanceMeasured( );
	    observableDistance.setVal( new Distance(lastSonarVal) ); 
    } 	
  
    @Override
    public void activate() {
        if( p == null ) {
        try { 
            p      = Runtime.getRuntime().exec("sudo ./SonarAlone");
            reader = new BufferedReader(new InputStreamReader(p.getInputStream()));	
        }catch( Exception e) {...}
 		}
 		super.activate();
    }

  @Override
  protected void sonarProduce( ) {
    try {
      String data = reader.readLine();
      if( data == null ) return;
      int v = Integer.parseInt(data);
      //Eliminiamo dati del tipo 3430 
      if( lastSonarVal != v && v < DomainSystemConfig.sonarDistanceMax) {	        
        lastSonarVal = v;
        updateDistance( v );
      }
    }catch( Exception e) {... }		

    @Override
    public void deactivate() {
        if( p != null ) {
            p.destroy(); 
            p=null;
        }
        super.deactivate();
    }
  }
 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Aggiornamento di DeviceFactory
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

La nascita del nuovo tipo di Sonar ci induce a introdurre nuovi metodi in :ref:`DeviceFactory<DeviceFactory>`:

.. code:: java

  public static ISonar createSonar(boolean observable) {
    if( observable ) return createSonarObservable();
    else return createSonar();
    }

  public static ISonarObservable createSonarObservable() {
    if( DomainSystemConfig.simulation)  { return new SonarMockObservable();
    }else { return SonarConcreteObservable(); }	
  }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Testing del Sonar osservabile
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Il testing sul ``SonarMockObservable`` viene qui impostato nel modo che segue:

- si regola il Sonar in modo che produca un valore costante definito in ``DomainSystemConfig.testingDistance``
- si introduce (almeno) un observer che controlla che il dato osservato sia quello emesso

.. code:: java

  @Test 
  public void testSingleshotSonarObservableMock() {
    DomainSystemConfig.testing = true;
    boolean oneShot           = true;
    ISonarObservable sonar = DeviceFactory.createSonarObservable();
    IObserver obs1         = new SonarObserverFortesting("obs1",oneShot) ;
    sonar.register( obs1 );	//add then observer
    sonar.activate();
    int v0 = sonar.getDistance().getVal();
    assertTrue(  v0 == DomainSystemConfig.testingDistance );
  }

L'*observer* viene impostato in modo da controllare anche dati emessi da un sonar reale
che opera con ostacolo fisso posto davanti ad esso, alla distanza prefissata.

.. _SonarObserverFortesting:

.. code:: java

  class SonarObserverFortesting implements IObserver{
  private String name;
  private boolean oneShot = false;
  private int v0          = -1;
  private int delta       =  1;
  private ISonarObservable sonar;
	
  public SonarObserverFortesting(
          String name,ISonarObservable sonar,boolean oneShot) {
    this.name    = name;
    this.oneShot = oneShot;
  }
  @Override  //from java.util.Observer
  public void update(Observable source, Object data) {
    update(data.toString() );
  }
  @Override //from IObserver
  public void update(int value) {
    if(oneShot) {
      assertTrue( value == DomainSystemConfig.testingDistance );	
    }else {
      int value = Integer.parseInt(vs);
      if( v0 == -1 ) {//set the first value observed
        v0 = value;
      }else {
        int vexpectedMin = v0-delta;
        int vexpectedMax = v0+delta;
        assertTrue(value<=vexpectedMax && value>=vexpectedMin );
        v0 = value;			 
        //if( v0 == 30 && name.equals("obs1")) sonar.unregister(this);
        }
      }
    }
  }
  }//SonarObserverFortesting

Si noti che observer di questo tipo vengono di norma eseguiti all'interno del Thread dell'observable che sta operando 
per conto di un qualche client.

.. _ledOsservabile: 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Il Led osservabile?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Essendo il Led un dispositivo di output, sembra avere poco senso l'ipotesi di rendere anche il Led osservabile.

Tuttavia, la seguente domanda potrebbe essere rilevante:

:remark:`può essere utile rendere osservabile il LedModel?`

Notiamo infatti che il :ref:`LedMock<LedMock>` e il :ref:`LedConcrete<LedConcrete>` potrebbero essere visti non tanto come due
specializzazioni della classe :ref:`LedModel<LedModel>`, quanto come due possibili :blue:`viste del modello`.

Questa ipotesi trae ispirazione dal pattern `MVC`_ (*Model View Controller*): ogni modifica del  :ref:`LedModel<LedModel>`
viene propagata ad uno o più observer che visualizzano la variazione di stato del Led o come dispostivo simulato 
(:ref:`LedMock<LedMock>`) o come dispositivo concreto (:ref:`LedConcrete<LedConcrete>`).

Una variante potrebbe essere anche la introduzione di un *Presenter*, come suggerito dal pattern 
`MVP`_ (*Model View Presenter*).
